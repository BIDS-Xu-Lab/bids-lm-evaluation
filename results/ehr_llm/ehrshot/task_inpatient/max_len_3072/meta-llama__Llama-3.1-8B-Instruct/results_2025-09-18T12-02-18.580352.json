{
  "results": {
    "group_ehrshot_inpatient_tasks_gu": {
      "f1_gu_yn,binary_yn": 0.1499714006261503,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.29529400835899505,
      "recall_gu_yn_stderr,binary_yn": "N/A",
      "exact_match,binary_yn": 0.7228915662650602,
      "exact_match_stderr,binary_yn": 0.008579548039265824,
      "alias": "group_ehrshot_inpatient_tasks_gu"
    },
    "ehrshot_inpatient_longstay_gu": {
      "alias": " - ehrshot_inpatient_longstay_gu",
      "exact_match,binary_yn": 0.5850860420650096,
      "exact_match_stderr,binary_yn": 0.021565207426591976,
      "f1_gu_yn,binary_yn": 0.14901960784313725,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.4222222222222222,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_inpatient_mortality_gu": {
      "alias": " - ehrshot_inpatient_mortality_gu",
      "exact_match,binary_yn": 0.984936268829664,
      "exact_match_stderr,binary_yn": 0.004148744697850086,
      "f1_gu_yn,binary_yn": 0.0,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.0,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_inpatient_readmission_gu": {
      "alias": " - ehrshot_inpatient_readmission_gu",
      "exact_match,binary_yn": 0.42829827915869984,
      "exact_match_stderr,binary_yn": 0.021658215116826626,
      "f1_gu_yn,binary_yn": 0.3983903420523139,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.6556291390728477,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    }
  },
  "groups": {
    "group_ehrshot_inpatient_tasks_gu": {
      "f1_gu_yn,binary_yn": 0.1499714006261503,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.29529400835899505,
      "recall_gu_yn_stderr,binary_yn": "N/A",
      "exact_match,binary_yn": 0.7228915662650602,
      "exact_match_stderr,binary_yn": 0.008579548039265824,
      "alias": "group_ehrshot_inpatient_tasks_gu"
    }
  },
  "group_subtasks": {
    "group_ehrshot_inpatient_tasks_gu": [
      "ehrshot_inpatient_longstay_gu",
      "ehrshot_inpatient_readmission_gu",
      "ehrshot_inpatient_mortality_gu"
    ]
  },
  "configs": {
    "ehrshot_inpatient_longstay_gu": {
      "task": "ehrshot_inpatient_longstay_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_operational/task_longstay/task_longstay_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text_longstay(doc) -> str:\n    \"\"\"\n    Generate the input prompt for operational task: inpatient longstay prediction.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - longstay_7d: inpatient visit longstay outcome (integer 0 or 1)\n            - visit_cumulated: Full visit history text (prior visits only, before current admission)\n            - visit_start_datetime: Current inpatient visit start datetime\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_cumulated = doc[\"visit_cumulated\"]\n    current_visit_start = doc[\"visit_start_datetime\"]\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's current inpatient visit will be a long stay visit (staying more than 7 days) based on their prior EHR visit data: \n\n{visit_cumulated}\n\nAbove are the patient's prior EHR visit records (before the current admission) in chronological order. \n\nCURRENT ADMISSION INFORMATION:\n- Current visit start datetime: {current_visit_start}\n- The patient was admitted to the hospital as an inpatient visit.\n\nYou are a medical AI assistant analyzing patient data to predict if the patient's current inpatient visit will be a long stay visit (staying more than 7 days) given the patient's prior EHR visit records and current inpatient admission information provided above.\n\nINSTRUCTIONS:\n- Predict if the patient's current inpatient visit will be a long stay visit (staying more than 7 days)\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target_longstay(doc) -> str:\n    \"\"\"\n    Extract the target label for the longstay prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - longstay_7d: The actual inpatient visit longstay outcome (integer 0 or 1)\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"longstay_7d\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "Custom EHR operational task for longstay prediction",
        "pretrained": "meta-llama/Llama-3.1-8B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.1-8B-Instruct",
        "task_name": "inpatient"
      }
    },
    "ehrshot_inpatient_mortality_gu": {
      "task": "ehrshot_inpatient_mortality_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_mortality/task_mortality_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text_mortality(doc) -> str:\n    \"\"\"\n    Generate the input prompt for 30-day mortality prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - mortality_30d: Target outcome (0 = not deceased, 1 = deceased)\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient will die within the next 30 days after the start of the current inpatient hospitalization based on their EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current inpatient visit) in chronological order.\n\nYou are a medical AI assistant analyzing patient data to predict 30-day mortality given the patient's recent and current EHR visit records provided above.\n\nINSTRUCTIONS:\n- The patient is currently admitted as an inpatient (the current visit is an inpatient hospitalization)\n- Predict if the patient will die within the next 30 days after this inpatient visit's start datetime\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target_mortality(doc) -> str:\n    \"\"\"\n    Extract the target label for the mortality prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - mortality_30d: The actual 30-day mortality outcome (0 = not deceased, 1 = deceased)\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"mortality_30d\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR 30-day inpatient mortality prediction task: predict patient survival within 30 days for current inpatient hospitalization using complete visit history (0 = survived, 1 = deceased)",
        "pretrained": "meta-llama/Llama-3.1-8B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.1-8B-Instruct",
        "task_name": "inpatient"
      }
    },
    "ehrshot_inpatient_readmission_gu": {
      "task": "ehrshot_inpatient_readmission_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_operational/task_readmission/task_readmission_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text_readmission(doc) -> str:\n    \"\"\"\n    Generate the input prompt for operational task: inpatient readmission prediction.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - readmission_30d: inpatient readmission outcome (integer 0 or 1)\n            - visit_cumulated: Full visit history text (including index visit)\n            - visit_start_datetime: Current inpatient visit start datetime\n            - visit_end_datetime: Current inpatient visit end datetime (discharge time)\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_cumulated = doc[\"visit_cumulated\"]\n    current_visit_end = doc[\"visit_end_datetime\"]\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient will be readmitted to the hospital within 30 days after discharge from their current inpatient visit based on their EHR visit data:\n\n{visit_cumulated}\n\nAbove are the patient's EHR visit records (including the current inpatient visit) in chronological order.\n\n\n\nYou are a medical AI assistant analyzing patient data to predict if the patient will be readmitted to the hospital within 30 days after discharge from their current inpatient visit given the patient's EHR visit records and current visit information provided above.\n\nINSTRUCTIONS:\n- Predict if the patient will be readmitted to the hospital within 30 days after the current inpatient visit end datetime ({current_visit_end})\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target_readmission(doc) -> str:\n    \"\"\"\n    Extract the target label for the readmission prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - readmission_30d: The actual inpatient readmission outcome (integer 0 or 1)\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"readmission_30d\"]) == 1 else \"No\"\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "Custom EHR operational task for readmission prediction",
        "pretrained": "meta-llama/Llama-3.1-8B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.1-8B-Instruct",
        "task_name": "inpatient"
      }
    }
  },
  "versions": {
    "ehrshot_inpatient_longstay_gu": "Yaml",
    "ehrshot_inpatient_mortality_gu": "Yaml",
    "ehrshot_inpatient_readmission_gu": "Yaml",
    "group_ehrshot_inpatient_tasks_gu": 1.0
  },
  "n-shot": {
    "ehrshot_inpatient_longstay_gu": 0,
    "ehrshot_inpatient_mortality_gu": 0,
    "ehrshot_inpatient_readmission_gu": 0
  },
  "higher_is_better": {
    "ehrshot_inpatient_longstay_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_inpatient_mortality_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_inpatient_readmission_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "group_ehrshot_inpatient_tasks_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    }
  },
  "n-samples": {
    "ehrshot_inpatient_longstay_gu": {
      "original": 523,
      "effective": 523
    },
    "ehrshot_inpatient_readmission_gu": {
      "original": 523,
      "effective": 523
    },
    "ehrshot_inpatient_mortality_gu": {
      "original": 863,
      "effective": 863
    }
  },
  "config": {
    "model": "vllm",
    "model_args": "pretrained=meta-llama/Llama-3.1-8B-Instruct,tensor_parallel_size=1,data_parallel_size=1,dtype=bfloat16,max_model_len=3072,gpu_memory_utilization=0.8,enable_thinking=True,think_end_token=</think>",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "63d74457",
  "date": 1758211184.824381,
  "pretty_env_info": "PyTorch version: 2.6.0+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: Red Hat Enterprise Linux release 8.10 (Ootpa) (x86_64)\nGCC version: (GCC) 8.5.0 20210514 (Red Hat 8.5.0-26)\nClang version: Could not collect\nCMake version: Could not collect\nLibc version: glibc-2.28\n\nPython version: 3.12.11 | packaged by conda-forge | (main, Jun  4 2025, 14:45:31) [GCC 13.3.0] (64-bit runtime)\nPython platform: Linux-4.18.0-553.52.1.el8_10.x86_64-x86_64-with-glibc2.28\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: GPU 0: NVIDIA H200\nNvidia driver version: 570.133.20\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:        x86_64\nCPU op-mode(s):      32-bit, 64-bit\nByte Order:          Little Endian\nCPU(s):              48\nOn-line CPU(s) list: 0-47\nThread(s) per core:  1\nCore(s) per socket:  24\nSocket(s):           2\nNUMA node(s):        2\nVendor ID:           GenuineIntel\nCPU family:          6\nModel:               207\nModel name:          INTEL(R) XEON(R) GOLD 6542Y\nStepping:            2\nCPU MHz:             4100.000\nCPU max MHz:         4100.0000\nCPU min MHz:         800.0000\nBogoMIPS:            5800.00\nL1d cache:           48K\nL1i cache:           32K\nL2 cache:            2048K\nL3 cache:            61440K\nNUMA node0 CPU(s):   0-23\nNUMA node1 CPU(s):   24-47\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 ds_cpl smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cat_l2 cdp_l3 invpcid_single intel_ppin cdp_l2 ssbd mba ibrs ibpb stibp ibrs_enhanced fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb intel_pt avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local split_lock_detect avx_vnni avx512_bf16 wbnoinvd dtherm ida arat pln pts hfi avx512vbmi umip pku ospke waitpkg avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg tme avx512_vpopcntdq la57 rdpid bus_lock_detect cldemote movdiri movdir64b enqcmd fsrm md_clear serialize tsxldtrk pconfig arch_lbr amx_bf16 avx512_fp16 amx_tile amx_int8 flush_l1d arch_capabilities\n\nVersions of relevant libraries:\n[pip3] numpy==2.2.6\n[pip3] nvidia-cublas-cu12==12.4.5.8\n[pip3] nvidia-cuda-cupti-cu12==12.4.127\n[pip3] nvidia-cuda-nvrtc-cu12==12.4.127\n[pip3] nvidia-cuda-runtime-cu12==12.4.127\n[pip3] nvidia-cudnn-cu12==9.1.0.70\n[pip3] nvidia-cufft-cu12==11.2.1.3\n[pip3] nvidia-curand-cu12==10.3.5.147\n[pip3] nvidia-cusolver-cu12==11.6.1.9\n[pip3] nvidia-cusparse-cu12==12.3.1.170\n[pip3] nvidia-cusparselt-cu12==0.6.2\n[pip3] nvidia-nccl-cu12==2.21.5\n[pip3] nvidia-nvjitlink-cu12==12.4.127\n[pip3] nvidia-nvtx-cu12==12.4.127\n[pip3] torch==2.6.0\n[pip3] torchaudio==2.6.0\n[pip3] torchvision==0.21.0\n[pip3] triton==3.2.0\n[conda] numpy                     2.2.6                    pypi_0    pypi\n[conda] nvidia-cublas-cu12        12.4.5.8                 pypi_0    pypi\n[conda] nvidia-cuda-cupti-cu12    12.4.127                 pypi_0    pypi\n[conda] nvidia-cuda-nvrtc-cu12    12.4.127                 pypi_0    pypi\n[conda] nvidia-cuda-runtime-cu12  12.4.127                 pypi_0    pypi\n[conda] nvidia-cudnn-cu12         9.1.0.70                 pypi_0    pypi\n[conda] nvidia-cufft-cu12         11.2.1.3                 pypi_0    pypi\n[conda] nvidia-curand-cu12        10.3.5.147               pypi_0    pypi\n[conda] nvidia-cusolver-cu12      11.6.1.9                 pypi_0    pypi\n[conda] nvidia-cusparse-cu12      12.3.1.170               pypi_0    pypi\n[conda] nvidia-cusparselt-cu12    0.6.2                    pypi_0    pypi\n[conda] nvidia-nccl-cu12          2.21.5                   pypi_0    pypi\n[conda] nvidia-nvjitlink-cu12     12.4.127                 pypi_0    pypi\n[conda] nvidia-nvtx-cu12          12.4.127                 pypi_0    pypi\n[conda] torch                     2.6.0                    pypi_0    pypi\n[conda] torchaudio                2.6.0                    pypi_0    pypi\n[conda] torchvision               0.21.0                   pypi_0    pypi\n[conda] triton                    3.2.0                    pypi_0    pypi",
  "transformers_version": "4.56.1",
  "lm_eval_version": "0.4.9.1",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|eot_id|>",
    "128009"
  ],
  "tokenizer_eos_token": [
    "<|eot_id|>",
    "128009"
  ],
  "tokenizer_bos_token": [
    "<|begin_of_text|>",
    "128000"
  ],
  "eot_token_id": 128009,
  "max_length": 3072,
  "task_hashes": {},
  "model_source": "vllm",
  "model_name": "meta-llama/Llama-3.1-8B-Instruct",
  "model_name_sanitized": "meta-llama__Llama-3.1-8B-Instruct",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": "{{- bos_token }}\n{%- if custom_tools is defined %}\n    {%- set tools = custom_tools %}\n{%- endif %}\n{%- if not tools_in_user_message is defined %}\n    {%- set tools_in_user_message = true %}\n{%- endif %}\n{%- if not date_string is defined %}\n    {%- set date_string = \"26 Jul 2024\" %}\n{%- endif %}\n{%- if not tools is defined %}\n    {%- set tools = none %}\n{%- endif %}\n\n{#- This block extracts the system message, so we can slot it into the right place. #}\n{%- if messages[0]['role'] == 'system' %}\n    {%- set system_message = messages[0]['content']|trim %}\n    {%- set messages = messages[1:] %}\n{%- else %}\n    {%- set system_message = \"\" %}\n{%- endif %}\n\n{#- System message + builtin tools #}\n{{- \"<|start_header_id|>system<|end_header_id|>\\n\\n\" }}\n{%- if builtin_tools is defined or tools is not none %}\n    {{- \"Environment: ipython\\n\" }}\n{%- endif %}\n{%- if builtin_tools is defined %}\n    {{- \"Tools: \" + builtin_tools | reject('equalto', 'code_interpreter') | join(\", \") + \"\\n\\n\"}}\n{%- endif %}\n{{- \"Cutting Knowledge Date: December 2023\\n\" }}\n{{- \"Today Date: \" + date_string + \"\\n\\n\" }}\n{%- if tools is not none and not tools_in_user_message %}\n    {{- \"You have access to the following functions. To call a function, please respond with JSON for a function call.\" }}\n    {{- 'Respond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.' }}\n    {{- \"Do not use variables.\\n\\n\" }}\n    {%- for t in tools %}\n        {{- t | tojson(indent=4) }}\n        {{- \"\\n\\n\" }}\n    {%- endfor %}\n{%- endif %}\n{{- system_message }}\n{{- \"<|eot_id|>\" }}\n\n{#- Custom tools are passed in a user message with some extra guidance #}\n{%- if tools_in_user_message and not tools is none %}\n    {#- Extract the first user message so we can plug it in here #}\n    {%- if messages | length != 0 %}\n        {%- set first_user_message = messages[0]['content']|trim %}\n        {%- set messages = messages[1:] %}\n    {%- else %}\n        {{- raise_exception(\"Cannot put tools in the first user message when there's no first user message!\") }}\n{%- endif %}\n    {{- '<|start_header_id|>user<|end_header_id|>\\n\\n' -}}\n    {{- \"Given the following functions, please respond with a JSON for a function call \" }}\n    {{- \"with its proper arguments that best answers the given prompt.\\n\\n\" }}\n    {{- 'Respond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.' }}\n    {{- \"Do not use variables.\\n\\n\" }}\n    {%- for t in tools %}\n        {{- t | tojson(indent=4) }}\n        {{- \"\\n\\n\" }}\n    {%- endfor %}\n    {{- first_user_message + \"<|eot_id|>\"}}\n{%- endif %}\n\n{%- for message in messages %}\n    {%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool_calls' in message) %}\n        {{- '<|start_header_id|>' + message['role'] + '<|end_header_id|>\\n\\n'+ message['content'] | trim + '<|eot_id|>' }}\n    {%- elif 'tool_calls' in message %}\n        {%- if not message.tool_calls|length == 1 %}\n            {{- raise_exception(\"This model only supports single tool-calls at once!\") }}\n        {%- endif %}\n        {%- set tool_call = message.tool_calls[0].function %}\n        {%- if builtin_tools is defined and tool_call.name in builtin_tools %}\n            {{- '<|start_header_id|>assistant<|end_header_id|>\\n\\n' -}}\n            {{- \"<|python_tag|>\" + tool_call.name + \".call(\" }}\n            {%- for arg_name, arg_val in tool_call.arguments | items %}\n                {{- arg_name + '=\"' + arg_val + '\"' }}\n                {%- if not loop.last %}\n                    {{- \", \" }}\n                {%- endif %}\n                {%- endfor %}\n            {{- \")\" }}\n        {%- else  %}\n            {{- '<|start_header_id|>assistant<|end_header_id|>\\n\\n' -}}\n            {{- '{\"name\": \"' + tool_call.name + '\", ' }}\n            {{- '\"parameters\": ' }}\n            {{- tool_call.arguments | tojson }}\n            {{- \"}\" }}\n        {%- endif %}\n        {%- if builtin_tools is defined %}\n            {#- This means we're in ipython mode #}\n            {{- \"<|eom_id|>\" }}\n        {%- else %}\n            {{- \"<|eot_id|>\" }}\n        {%- endif %}\n    {%- elif message.role == \"tool\" or message.role == \"ipython\" %}\n        {{- \"<|start_header_id|>ipython<|end_header_id|>\\n\\n\" }}\n        {%- if message.content is mapping or message.content is iterable %}\n            {{- message.content | tojson }}\n        {%- else %}\n            {{- message.content }}\n        {%- endif %}\n        {{- \"<|eot_id|>\" }}\n    {%- endif %}\n{%- endfor %}\n{%- if add_generation_prompt %}\n    {{- '<|start_header_id|>assistant<|end_header_id|>\\n\\n' }}\n{%- endif %}\n",
  "chat_template_sha": "e10ca381b1ccc5cf9db52e371f3b6651576caee0a630b452e2816b2d404d4b65",
  "start_time": 2791497.71499879,
  "end_time": 2791654.144040648,
  "total_evaluation_time_seconds": "156.42904185783118"
}
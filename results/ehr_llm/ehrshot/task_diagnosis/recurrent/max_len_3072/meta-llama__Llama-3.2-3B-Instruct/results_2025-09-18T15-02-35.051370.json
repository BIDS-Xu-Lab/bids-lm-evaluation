{
  "results": {
    "group_ehrshot_recurrent_diagnosis_tasks_gu": {
      "f1_gu_yn,binary_yn": 0.6581826996414399,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "exact_match,binary_yn": 0.5394668060637742,
      "exact_match_stderr,binary_yn": 0.01129158344724655,
      "recall_gu_yn,binary_yn": 0.9278833250951567,
      "recall_gu_yn_stderr,binary_yn": "N/A",
      "alias": "group_ehrshot_recurrent_diagnosis_tasks_gu"
    },
    "ehrshot_recurrent_diagnosis_acute_myocardial_infarction_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_acute_myocardial_infarction_gu",
      "exact_match,binary_yn": 0.5813953488372093,
      "exact_match_stderr,binary_yn": 0.07612251984976479,
      "f1_gu_yn,binary_yn": 0.3076923076923077,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.6666666666666666,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_asthma_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_asthma_gu",
      "exact_match,binary_yn": 0.4,
      "exact_match_stderr,binary_yn": 0.04803844614152614,
      "f1_gu_yn,binary_yn": 0.5333333333333333,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.9473684210526315,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_breast_cancer_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_breast_cancer_gu",
      "exact_match,binary_yn": 0.6176470588235294,
      "exact_match_stderr,binary_yn": 0.08459514448960627,
      "f1_gu_yn,binary_yn": 0.7547169811320755,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.8333333333333334,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_chronic_kidney_disease_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_chronic_kidney_disease_gu",
      "exact_match,binary_yn": 0.6115107913669064,
      "exact_match_stderr,binary_yn": 0.041490818209760694,
      "f1_gu_yn,binary_yn": 0.7244897959183674,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.9466666666666667,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_chronic_obstructive_pulmonary_disease_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_chronic_obstructive_pulmonary_disease_gu",
      "exact_match,binary_yn": 0.5857142857142857,
      "exact_match_stderr,binary_yn": 0.05930186364895277,
      "f1_gu_yn,binary_yn": 0.5538461538461539,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.5806451612903226,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_coronary_arteriosclerosis_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_coronary_arteriosclerosis_gu",
      "exact_match,binary_yn": 0.5166666666666667,
      "exact_match_stderr,binary_yn": 0.04580945392704764,
      "f1_gu_yn,binary_yn": 0.6419753086419753,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.9285714285714286,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_dementia_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_dementia_gu",
      "exact_match,binary_yn": 0.38461538461538464,
      "exact_match_stderr,binary_yn": 0.1404416814115811,
      "f1_gu_yn,binary_yn": 0.5555555555555556,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.8333333333333334,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_depressive_disorder_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_depressive_disorder_gu",
      "exact_match,binary_yn": 0.44755244755244755,
      "exact_match_stderr,binary_yn": 0.041727591966030445,
      "f1_gu_yn,binary_yn": 0.6030150753768844,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.967741935483871,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_heart_failure_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_heart_failure_gu",
      "exact_match,binary_yn": 0.5185185185185185,
      "exact_match_stderr,binary_yn": 0.04830366024635331,
      "f1_gu_yn,binary_yn": 0.6666666666666666,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.9811320754716981,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_hyperlipidemia_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_hyperlipidemia_gu",
      "exact_match,binary_yn": 0.5865384615384616,
      "exact_match_stderr,binary_yn": 0.027924513236008763,
      "f1_gu_yn,binary_yn": 0.734020618556701,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.967391304347826,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_hypertension_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_hypertension_gu",
      "exact_match,binary_yn": 0.5653409090909091,
      "exact_match_stderr,binary_yn": 0.02645915874473581,
      "f1_gu_yn,binary_yn": 0.7213114754098361,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.9949748743718593,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_intestinal_cancer_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_intestinal_cancer_gu",
      "exact_match,binary_yn": 0.5769230769230769,
      "exact_match_stderr,binary_yn": 0.09880948137434714,
      "f1_gu_yn,binary_yn": 0.6666666666666666,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 1.0,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_ischemic_stroke_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_ischemic_stroke_gu",
      "exact_match,binary_yn": 0.4,
      "exact_match_stderr,binary_yn": 0.09097176522946843,
      "f1_gu_yn,binary_yn": 0.5263157894736842,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 1.0,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_liver_cancer_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_liver_cancer_gu",
      "exact_match,binary_yn": 0.4482758620689655,
      "exact_match_stderr,binary_yn": 0.09398415777506855,
      "f1_gu_yn,binary_yn": 0.5294117647058824,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.6923076923076923,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_lung_cancer_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_lung_cancer_gu",
      "exact_match,binary_yn": 0.6774193548387096,
      "exact_match_stderr,binary_yn": 0.08534681648595453,
      "f1_gu_yn,binary_yn": 0.8,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.9090909090909091,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_lupus_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_lupus_gu",
      "exact_match,binary_yn": 0.6,
      "exact_match_stderr,binary_yn": 0.1,
      "f1_gu_yn,binary_yn": 0.6428571428571429,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.6428571428571429,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_obesity_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_obesity_gu",
      "exact_match,binary_yn": 0.3972602739726027,
      "exact_match_stderr,binary_yn": 0.040636704038880374,
      "f1_gu_yn,binary_yn": 0.5164835164835165,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.9791666666666666,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_pancreatic_cancer_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_pancreatic_cancer_gu",
      "exact_match,binary_yn": 0.391304347826087,
      "exact_match_stderr,binary_yn": 0.10405096111532161,
      "f1_gu_yn,binary_yn": 0.5,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 1.0,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_prostate_cancer_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_prostate_cancer_gu",
      "exact_match,binary_yn": 0.875,
      "exact_match_stderr,binary_yn": 0.08539125638299665,
      "f1_gu_yn,binary_yn": 0.9090909090909091,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.8333333333333334,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_recurrent_diagnosis_type_ii_diabetes_gu": {
      "alias": " - ehrshot_recurrent_diagnosis_type_ii_diabetes_gu",
      "exact_match,binary_yn": 0.6216216216216216,
      "exact_match_stderr,binary_yn": 0.04000069567032184,
      "f1_gu_yn,binary_yn": 0.7333333333333333,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.8651685393258427,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    }
  },
  "groups": {
    "group_ehrshot_recurrent_diagnosis_tasks_gu": {
      "f1_gu_yn,binary_yn": 0.6581826996414399,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "exact_match,binary_yn": 0.5394668060637742,
      "exact_match_stderr,binary_yn": 0.01129158344724655,
      "recall_gu_yn,binary_yn": 0.9278833250951567,
      "recall_gu_yn_stderr,binary_yn": "N/A",
      "alias": "group_ehrshot_recurrent_diagnosis_tasks_gu"
    }
  },
  "group_subtasks": {
    "group_ehrshot_recurrent_diagnosis_tasks_gu": [
      "ehrshot_recurrent_diagnosis_acute_myocardial_infarction_gu",
      "ehrshot_recurrent_diagnosis_asthma_gu",
      "ehrshot_recurrent_diagnosis_breast_cancer_gu",
      "ehrshot_recurrent_diagnosis_chronic_kidney_disease_gu",
      "ehrshot_recurrent_diagnosis_chronic_obstructive_pulmonary_disease_gu",
      "ehrshot_recurrent_diagnosis_coronary_arteriosclerosis_gu",
      "ehrshot_recurrent_diagnosis_dementia_gu",
      "ehrshot_recurrent_diagnosis_depressive_disorder_gu",
      "ehrshot_recurrent_diagnosis_heart_failure_gu",
      "ehrshot_recurrent_diagnosis_hyperlipidemia_gu",
      "ehrshot_recurrent_diagnosis_hypertension_gu",
      "ehrshot_recurrent_diagnosis_intestinal_cancer_gu",
      "ehrshot_recurrent_diagnosis_ischemic_stroke_gu",
      "ehrshot_recurrent_diagnosis_liver_cancer_gu",
      "ehrshot_recurrent_diagnosis_lung_cancer_gu",
      "ehrshot_recurrent_diagnosis_lupus_gu",
      "ehrshot_recurrent_diagnosis_obesity_gu",
      "ehrshot_recurrent_diagnosis_pancreatic_cancer_gu",
      "ehrshot_recurrent_diagnosis_prostate_cancer_gu",
      "ehrshot_recurrent_diagnosis_type_ii_diabetes_gu"
    ]
  },
  "configs": {
    "ehrshot_recurrent_diagnosis_acute_myocardial_infarction_gu": {
      "task": "ehrshot_recurrent_diagnosis_acute_myocardial_infarction_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_acute_myocardial_infarction(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"acute_myocardial_infarction\")\n",
      "doc_to_text": "def doc_to_text_acute_myocardial_infarction(doc):\n    return doc_to_text(doc, condition_name=\"acute_myocardial_infarction\")\n",
      "doc_to_target": "def doc_to_target_acute_myocardial_infarction(doc):\n    return doc_to_target(doc, condition_name=\"acute_myocardial_infarction\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT acute myocardial infarction diagnosis prediction: predict 1-year risk of subsequent Acute myocardial infarction diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_asthma_gu": {
      "task": "ehrshot_recurrent_diagnosis_asthma_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_asthma(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"asthma\")\n",
      "doc_to_text": "def doc_to_text_asthma(doc):\n    return doc_to_text(doc, condition_name=\"asthma\")\n",
      "doc_to_target": "def doc_to_target_asthma(doc):\n    return doc_to_target(doc, condition_name=\"asthma\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT asthma diagnosis prediction: predict 1-year risk of subsequent Asthma diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_breast_cancer_gu": {
      "task": "ehrshot_recurrent_diagnosis_breast_cancer_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_breast_cancer(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"breast_cancer\")\n",
      "doc_to_text": "def doc_to_text_breast_cancer(doc):\n    return doc_to_text(doc, condition_name=\"breast_cancer\")\n",
      "doc_to_target": "def doc_to_target_breast_cancer(doc):\n    return doc_to_target(doc, condition_name=\"breast_cancer\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT breast cancer diagnosis prediction: predict 1-year risk of subsequent Malignant tumor of breast diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_chronic_kidney_disease_gu": {
      "task": "ehrshot_recurrent_diagnosis_chronic_kidney_disease_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_chronic_kidney_disease(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"chronic_kidney_disease\")\n",
      "doc_to_text": "def doc_to_text_chronic_kidney_disease(doc):\n    return doc_to_text(doc, condition_name=\"chronic_kidney_disease\")\n",
      "doc_to_target": "def doc_to_target_chronic_kidney_disease(doc):\n    return doc_to_target(doc, condition_name=\"chronic_kidney_disease\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT chronic kidney disease diagnosis prediction: predict 1-year risk of subsequent Chronic kidney disease diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_chronic_obstructive_pulmonary_disease_gu": {
      "task": "ehrshot_recurrent_diagnosis_chronic_obstructive_pulmonary_disease_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_chronic_obstructive_pulmonary_disease(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"chronic_obstructive_pulmonary_disease\")\n",
      "doc_to_text": "def doc_to_text_chronic_obstructive_pulmonary_disease(doc):\n    return doc_to_text(doc, condition_name=\"chronic_obstructive_pulmonary_disease\")\n",
      "doc_to_target": "def doc_to_target_chronic_obstructive_pulmonary_disease(doc):\n    return doc_to_target(doc, condition_name=\"chronic_obstructive_pulmonary_disease\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT chronic obstructive pulmonary disease diagnosis prediction: predict 1-year risk of subsequent Chronic obstructive pulmonary disease diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_coronary_arteriosclerosis_gu": {
      "task": "ehrshot_recurrent_diagnosis_coronary_arteriosclerosis_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_coronary_arteriosclerosis(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"coronary_arteriosclerosis\")\n",
      "doc_to_text": "def doc_to_text_coronary_arteriosclerosis(doc):\n    return doc_to_text(doc, condition_name=\"coronary_arteriosclerosis\")\n",
      "doc_to_target": "def doc_to_target_coronary_arteriosclerosis(doc):\n    return doc_to_target(doc, condition_name=\"coronary_arteriosclerosis\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT coronary arteriosclerosis diagnosis prediction: predict 1-year risk of subsequent Coronary arteriosclerosis diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_dementia_gu": {
      "task": "ehrshot_recurrent_diagnosis_dementia_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_dementia(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"dementia\")\n",
      "doc_to_text": "def doc_to_text_dementia(doc):\n    return doc_to_text(doc, condition_name=\"dementia\")\n",
      "doc_to_target": "def doc_to_target_dementia(doc):\n    return doc_to_target(doc, condition_name=\"dementia\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT dementia diagnosis prediction: predict 1-year risk of subsequent Dementia diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_depressive_disorder_gu": {
      "task": "ehrshot_recurrent_diagnosis_depressive_disorder_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_depressive_disorder(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"depressive_disorder\")\n",
      "doc_to_text": "def doc_to_text_depressive_disorder(doc):\n    return doc_to_text(doc, condition_name=\"depressive_disorder\")\n",
      "doc_to_target": "def doc_to_target_depressive_disorder(doc):\n    return doc_to_target(doc, condition_name=\"depressive_disorder\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT depressive disorder diagnosis prediction: predict 1-year risk of subsequent Depressive disorder diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_heart_failure_gu": {
      "task": "ehrshot_recurrent_diagnosis_heart_failure_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_heart_failure(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"heart_failure\")\n",
      "doc_to_text": "def doc_to_text_heart_failure(doc):\n    return doc_to_text(doc, condition_name=\"heart_failure\")\n",
      "doc_to_target": "def doc_to_target_heart_failure(doc):\n    return doc_to_target(doc, condition_name=\"heart_failure\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT heart failure diagnosis prediction: predict 1-year risk of subsequent Heart failure diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_hyperlipidemia_gu": {
      "task": "ehrshot_recurrent_diagnosis_hyperlipidemia_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_hyperlipidemia(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"hyperlipidemia\")\n",
      "doc_to_text": "def doc_to_text_hyperlipidemia(doc):\n    return doc_to_text(doc, condition_name=\"hyperlipidemia\")\n",
      "doc_to_target": "def doc_to_target_hyperlipidemia(doc):\n    return doc_to_target(doc, condition_name=\"hyperlipidemia\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT hyperlipidemia diagnosis prediction: predict 1-year risk of subsequent Hyperlipidemia diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_hypertension_gu": {
      "task": "ehrshot_recurrent_diagnosis_hypertension_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_hypertension(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"hypertension\")\n",
      "doc_to_text": "def doc_to_text_hypertension(doc):\n    return doc_to_text(doc, condition_name=\"hypertension\")\n",
      "doc_to_target": "def doc_to_target_hypertension(doc):\n    return doc_to_target(doc, condition_name=\"hypertension\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT hypertension diagnosis prediction: predict 1-year risk of subsequent Essential hypertension diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_intestinal_cancer_gu": {
      "task": "ehrshot_recurrent_diagnosis_intestinal_cancer_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_intestinal_cancer(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"intestinal_cancer\")\n",
      "doc_to_text": "def doc_to_text_intestinal_cancer(doc):\n    return doc_to_text(doc, condition_name=\"intestinal_cancer\")\n",
      "doc_to_target": "def doc_to_target_intestinal_cancer(doc):\n    return doc_to_target(doc, condition_name=\"intestinal_cancer\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT intestinal cancer diagnosis prediction: predict 1-year risk of subsequent Malignant tumor of intestine diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_ischemic_stroke_gu": {
      "task": "ehrshot_recurrent_diagnosis_ischemic_stroke_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_ischemic_stroke(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"ischemic_stroke\")\n",
      "doc_to_text": "def doc_to_text_ischemic_stroke(doc):\n    return doc_to_text(doc, condition_name=\"ischemic_stroke\")\n",
      "doc_to_target": "def doc_to_target_ischemic_stroke(doc):\n    return doc_to_target(doc, condition_name=\"ischemic_stroke\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT ischemic stroke diagnosis prediction: predict 1-year risk of subsequent Cerebral infarction diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_liver_cancer_gu": {
      "task": "ehrshot_recurrent_diagnosis_liver_cancer_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_liver_cancer(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"liver_cancer\")\n",
      "doc_to_text": "def doc_to_text_liver_cancer(doc):\n    return doc_to_text(doc, condition_name=\"liver_cancer\")\n",
      "doc_to_target": "def doc_to_target_liver_cancer(doc):\n    return doc_to_target(doc, condition_name=\"liver_cancer\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT liver cancer diagnosis prediction: predict 1-year risk of subsequent Malignant tumor of liver diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_lung_cancer_gu": {
      "task": "ehrshot_recurrent_diagnosis_lung_cancer_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_lung_cancer(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"lung_cancer\")\n",
      "doc_to_text": "def doc_to_text_lung_cancer(doc):\n    return doc_to_text(doc, condition_name=\"lung_cancer\")\n",
      "doc_to_target": "def doc_to_target_lung_cancer(doc):\n    return doc_to_target(doc, condition_name=\"lung_cancer\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT lung cancer diagnosis prediction: predict 1-year risk of subsequent Malignant tumor of lung diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_lupus_gu": {
      "task": "ehrshot_recurrent_diagnosis_lupus_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_lupus(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"lupus\")\n",
      "doc_to_text": "def doc_to_text_lupus(doc):\n    return doc_to_text(doc, condition_name=\"lupus\")\n",
      "doc_to_target": "def doc_to_target_lupus(doc):\n    return doc_to_target(doc, condition_name=\"lupus\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT lupus diagnosis prediction: predict 1-year risk of subsequent Systemic lupus erythematosus diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_obesity_gu": {
      "task": "ehrshot_recurrent_diagnosis_obesity_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_obesity(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"obesity\")\n",
      "doc_to_text": "def doc_to_text_obesity(doc):\n    return doc_to_text(doc, condition_name=\"obesity\")\n",
      "doc_to_target": "def doc_to_target_obesity(doc):\n    return doc_to_target(doc, condition_name=\"obesity\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT obesity diagnosis prediction: predict 1-year risk of subsequent Obesity diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_pancreatic_cancer_gu": {
      "task": "ehrshot_recurrent_diagnosis_pancreatic_cancer_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_pancreatic_cancer(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"pancreatic_cancer\")\n",
      "doc_to_text": "def doc_to_text_pancreatic_cancer(doc):\n    return doc_to_text(doc, condition_name=\"pancreatic_cancer\")\n",
      "doc_to_target": "def doc_to_target_pancreatic_cancer(doc):\n    return doc_to_target(doc, condition_name=\"pancreatic_cancer\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT pancreatic cancer diagnosis prediction: predict 1-year risk of subsequent Malignant tumor of pancreas diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_prostate_cancer_gu": {
      "task": "ehrshot_recurrent_diagnosis_prostate_cancer_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_prostate_cancer(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"prostate_cancer\")\n",
      "doc_to_text": "def doc_to_text_prostate_cancer(doc):\n    return doc_to_text(doc, condition_name=\"prostate_cancer\")\n",
      "doc_to_target": "def doc_to_target_prostate_cancer(doc):\n    return doc_to_target(doc, condition_name=\"prostate_cancer\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT prostate cancer diagnosis prediction: predict 1-year risk of subsequent Malignant tumor of prostate diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    },
    "ehrshot_recurrent_diagnosis_type_ii_diabetes_gu": {
      "task": "ehrshot_recurrent_diagnosis_type_ii_diabetes_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/gpfs/radev/pi/xu_hua/shared/ehr_llm/ehrshot/visit_oriented_ehr/task_diagnosis/task_diagnosis_test/*.parquet"
        }
      },
      "test_split": "test",
      "process_docs": "def filter_recurrent_cases_type_ii_diabetes(dataset):\n    return filter_recurrent_cases(dataset, condition_name=\"type_ii_diabetes\")\n",
      "doc_to_text": "def doc_to_text_type_ii_diabetes(doc):\n    return doc_to_text(doc, condition_name=\"type_ii_diabetes\")\n",
      "doc_to_target": "def doc_to_target_type_ii_diabetes(doc):\n    return doc_to_target(doc, condition_name=\"type_ii_diabetes\")\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR-based RECURRENT type ii diabetes diagnosis prediction: predict 1-year risk of subsequent Type 2 diabetes mellitus diagnosis for patients with prior history",
        "pretrained": "meta-llama/Llama-3.2-3B-Instruct",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "3072",
        "gpu_memory_utilization": 0.8,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "meta-llama/Llama-3.2-3B-Instruct",
        "task_name": "diagnosis_recurrent"
      }
    }
  },
  "versions": {
    "ehrshot_recurrent_diagnosis_acute_myocardial_infarction_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_asthma_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_breast_cancer_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_chronic_kidney_disease_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_chronic_obstructive_pulmonary_disease_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_coronary_arteriosclerosis_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_dementia_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_depressive_disorder_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_heart_failure_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_hyperlipidemia_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_hypertension_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_intestinal_cancer_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_ischemic_stroke_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_liver_cancer_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_lung_cancer_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_lupus_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_obesity_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_pancreatic_cancer_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_prostate_cancer_gu": "Yaml",
    "ehrshot_recurrent_diagnosis_type_ii_diabetes_gu": "Yaml",
    "group_ehrshot_recurrent_diagnosis_tasks_gu": 1.0
  },
  "n-shot": {
    "ehrshot_recurrent_diagnosis_acute_myocardial_infarction_gu": 0,
    "ehrshot_recurrent_diagnosis_asthma_gu": 0,
    "ehrshot_recurrent_diagnosis_breast_cancer_gu": 0,
    "ehrshot_recurrent_diagnosis_chronic_kidney_disease_gu": 0,
    "ehrshot_recurrent_diagnosis_chronic_obstructive_pulmonary_disease_gu": 0,
    "ehrshot_recurrent_diagnosis_coronary_arteriosclerosis_gu": 0,
    "ehrshot_recurrent_diagnosis_dementia_gu": 0,
    "ehrshot_recurrent_diagnosis_depressive_disorder_gu": 0,
    "ehrshot_recurrent_diagnosis_heart_failure_gu": 0,
    "ehrshot_recurrent_diagnosis_hyperlipidemia_gu": 0,
    "ehrshot_recurrent_diagnosis_hypertension_gu": 0,
    "ehrshot_recurrent_diagnosis_intestinal_cancer_gu": 0,
    "ehrshot_recurrent_diagnosis_ischemic_stroke_gu": 0,
    "ehrshot_recurrent_diagnosis_liver_cancer_gu": 0,
    "ehrshot_recurrent_diagnosis_lung_cancer_gu": 0,
    "ehrshot_recurrent_diagnosis_lupus_gu": 0,
    "ehrshot_recurrent_diagnosis_obesity_gu": 0,
    "ehrshot_recurrent_diagnosis_pancreatic_cancer_gu": 0,
    "ehrshot_recurrent_diagnosis_prostate_cancer_gu": 0,
    "ehrshot_recurrent_diagnosis_type_ii_diabetes_gu": 0
  },
  "higher_is_better": {
    "ehrshot_recurrent_diagnosis_acute_myocardial_infarction_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_asthma_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_breast_cancer_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_chronic_kidney_disease_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_chronic_obstructive_pulmonary_disease_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_coronary_arteriosclerosis_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_dementia_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_depressive_disorder_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_heart_failure_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_hyperlipidemia_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_hypertension_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_intestinal_cancer_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_ischemic_stroke_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_liver_cancer_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_lung_cancer_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_lupus_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_obesity_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_pancreatic_cancer_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_prostate_cancer_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_recurrent_diagnosis_type_ii_diabetes_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "group_ehrshot_recurrent_diagnosis_tasks_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    }
  },
  "n-samples": {
    "ehrshot_recurrent_diagnosis_acute_myocardial_infarction_gu": {
      "original": 43,
      "effective": 43
    },
    "ehrshot_recurrent_diagnosis_asthma_gu": {
      "original": 105,
      "effective": 105
    },
    "ehrshot_recurrent_diagnosis_breast_cancer_gu": {
      "original": 34,
      "effective": 34
    },
    "ehrshot_recurrent_diagnosis_chronic_kidney_disease_gu": {
      "original": 139,
      "effective": 139
    },
    "ehrshot_recurrent_diagnosis_chronic_obstructive_pulmonary_disease_gu": {
      "original": 70,
      "effective": 70
    },
    "ehrshot_recurrent_diagnosis_coronary_arteriosclerosis_gu": {
      "original": 120,
      "effective": 120
    },
    "ehrshot_recurrent_diagnosis_dementia_gu": {
      "original": 13,
      "effective": 13
    },
    "ehrshot_recurrent_diagnosis_depressive_disorder_gu": {
      "original": 143,
      "effective": 143
    },
    "ehrshot_recurrent_diagnosis_heart_failure_gu": {
      "original": 108,
      "effective": 108
    },
    "ehrshot_recurrent_diagnosis_hyperlipidemia_gu": {
      "original": 312,
      "effective": 312
    },
    "ehrshot_recurrent_diagnosis_hypertension_gu": {
      "original": 352,
      "effective": 352
    },
    "ehrshot_recurrent_diagnosis_intestinal_cancer_gu": {
      "original": 26,
      "effective": 26
    },
    "ehrshot_recurrent_diagnosis_ischemic_stroke_gu": {
      "original": 30,
      "effective": 30
    },
    "ehrshot_recurrent_diagnosis_liver_cancer_gu": {
      "original": 29,
      "effective": 29
    },
    "ehrshot_recurrent_diagnosis_lung_cancer_gu": {
      "original": 31,
      "effective": 31
    },
    "ehrshot_recurrent_diagnosis_lupus_gu": {
      "original": 25,
      "effective": 25
    },
    "ehrshot_recurrent_diagnosis_obesity_gu": {
      "original": 146,
      "effective": 146
    },
    "ehrshot_recurrent_diagnosis_pancreatic_cancer_gu": {
      "original": 23,
      "effective": 23
    },
    "ehrshot_recurrent_diagnosis_prostate_cancer_gu": {
      "original": 16,
      "effective": 16
    },
    "ehrshot_recurrent_diagnosis_type_ii_diabetes_gu": {
      "original": 148,
      "effective": 148
    }
  },
  "config": {
    "model": "vllm",
    "model_args": "pretrained=meta-llama/Llama-3.2-3B-Instruct,tensor_parallel_size=1,data_parallel_size=1,dtype=bfloat16,max_model_len=3072,gpu_memory_utilization=0.8,enable_thinking=True,think_end_token=</think>",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "e54db55e",
  "date": 1758222006.813935,
  "pretty_env_info": "PyTorch version: 2.6.0+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: Red Hat Enterprise Linux release 8.10 (Ootpa) (x86_64)\nGCC version: (GCC) 8.5.0 20210514 (Red Hat 8.5.0-26)\nClang version: Could not collect\nCMake version: Could not collect\nLibc version: glibc-2.28\n\nPython version: 3.12.11 | packaged by conda-forge | (main, Jun  4 2025, 14:45:31) [GCC 13.3.0] (64-bit runtime)\nPython platform: Linux-4.18.0-553.52.1.el8_10.x86_64-x86_64-with-glibc2.28\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: GPU 0: NVIDIA H200\nNvidia driver version: 570.133.20\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:        x86_64\nCPU op-mode(s):      32-bit, 64-bit\nByte Order:          Little Endian\nCPU(s):              48\nOn-line CPU(s) list: 0-47\nThread(s) per core:  1\nCore(s) per socket:  24\nSocket(s):           2\nNUMA node(s):        2\nVendor ID:           GenuineIntel\nCPU family:          6\nModel:               207\nModel name:          INTEL(R) XEON(R) GOLD 6542Y\nStepping:            2\nCPU MHz:             3599.992\nCPU max MHz:         4100.0000\nCPU min MHz:         800.0000\nBogoMIPS:            5800.00\nL1d cache:           48K\nL1i cache:           32K\nL2 cache:            2048K\nL3 cache:            61440K\nNUMA node0 CPU(s):   0-23\nNUMA node1 CPU(s):   24-47\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 ds_cpl smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cat_l2 cdp_l3 invpcid_single intel_ppin cdp_l2 ssbd mba ibrs ibpb stibp ibrs_enhanced fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb intel_pt avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local split_lock_detect avx_vnni avx512_bf16 wbnoinvd dtherm ida arat pln pts hfi avx512vbmi umip pku ospke waitpkg avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg tme avx512_vpopcntdq la57 rdpid bus_lock_detect cldemote movdiri movdir64b enqcmd fsrm md_clear serialize tsxldtrk pconfig arch_lbr amx_bf16 avx512_fp16 amx_tile amx_int8 flush_l1d arch_capabilities\n\nVersions of relevant libraries:\n[pip3] numpy==2.2.6\n[pip3] nvidia-cublas-cu12==12.4.5.8\n[pip3] nvidia-cuda-cupti-cu12==12.4.127\n[pip3] nvidia-cuda-nvrtc-cu12==12.4.127\n[pip3] nvidia-cuda-runtime-cu12==12.4.127\n[pip3] nvidia-cudnn-cu12==9.1.0.70\n[pip3] nvidia-cufft-cu12==11.2.1.3\n[pip3] nvidia-curand-cu12==10.3.5.147\n[pip3] nvidia-cusolver-cu12==11.6.1.9\n[pip3] nvidia-cusparse-cu12==12.3.1.170\n[pip3] nvidia-cusparselt-cu12==0.6.2\n[pip3] nvidia-nccl-cu12==2.21.5\n[pip3] nvidia-nvjitlink-cu12==12.4.127\n[pip3] nvidia-nvtx-cu12==12.4.127\n[pip3] torch==2.6.0\n[pip3] torchaudio==2.6.0\n[pip3] torchvision==0.21.0\n[pip3] triton==3.2.0\n[conda] numpy                     2.2.6                    pypi_0    pypi\n[conda] nvidia-cublas-cu12        12.4.5.8                 pypi_0    pypi\n[conda] nvidia-cuda-cupti-cu12    12.4.127                 pypi_0    pypi\n[conda] nvidia-cuda-nvrtc-cu12    12.4.127                 pypi_0    pypi\n[conda] nvidia-cuda-runtime-cu12  12.4.127                 pypi_0    pypi\n[conda] nvidia-cudnn-cu12         9.1.0.70                 pypi_0    pypi\n[conda] nvidia-cufft-cu12         11.2.1.3                 pypi_0    pypi\n[conda] nvidia-curand-cu12        10.3.5.147               pypi_0    pypi\n[conda] nvidia-cusolver-cu12      11.6.1.9                 pypi_0    pypi\n[conda] nvidia-cusparse-cu12      12.3.1.170               pypi_0    pypi\n[conda] nvidia-cusparselt-cu12    0.6.2                    pypi_0    pypi\n[conda] nvidia-nccl-cu12          2.21.5                   pypi_0    pypi\n[conda] nvidia-nvjitlink-cu12     12.4.127                 pypi_0    pypi\n[conda] nvidia-nvtx-cu12          12.4.127                 pypi_0    pypi\n[conda] torch                     2.6.0                    pypi_0    pypi\n[conda] torchaudio                2.6.0                    pypi_0    pypi\n[conda] torchvision               0.21.0                   pypi_0    pypi\n[conda] triton                    3.2.0                    pypi_0    pypi",
  "transformers_version": "4.56.1",
  "lm_eval_version": "0.4.9.1",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|eot_id|>",
    "128009"
  ],
  "tokenizer_eos_token": [
    "<|eot_id|>",
    "128009"
  ],
  "tokenizer_bos_token": [
    "<|begin_of_text|>",
    "128000"
  ],
  "eot_token_id": 128009,
  "max_length": 3072,
  "task_hashes": {},
  "model_source": "vllm",
  "model_name": "meta-llama/Llama-3.2-3B-Instruct",
  "model_name_sanitized": "meta-llama__Llama-3.2-3B-Instruct",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": "{{- bos_token }}\n{%- if custom_tools is defined %}\n    {%- set tools = custom_tools %}\n{%- endif %}\n{%- if not tools_in_user_message is defined %}\n    {%- set tools_in_user_message = true %}\n{%- endif %}\n{%- if not date_string is defined %}\n    {%- if strftime_now is defined %}\n        {%- set date_string = strftime_now(\"%d %b %Y\") %}\n    {%- else %}\n        {%- set date_string = \"26 Jul 2024\" %}\n    {%- endif %}\n{%- endif %}\n{%- if not tools is defined %}\n    {%- set tools = none %}\n{%- endif %}\n\n{#- This block extracts the system message, so we can slot it into the right place. #}\n{%- if messages[0]['role'] == 'system' %}\n    {%- set system_message = messages[0]['content']|trim %}\n    {%- set messages = messages[1:] %}\n{%- else %}\n    {%- set system_message = \"\" %}\n{%- endif %}\n\n{#- System message #}\n{{- \"<|start_header_id|>system<|end_header_id|>\\n\\n\" }}\n{%- if tools is not none %}\n    {{- \"Environment: ipython\\n\" }}\n{%- endif %}\n{{- \"Cutting Knowledge Date: December 2023\\n\" }}\n{{- \"Today Date: \" + date_string + \"\\n\\n\" }}\n{%- if tools is not none and not tools_in_user_message %}\n    {{- \"You have access to the following functions. To call a function, please respond with JSON for a function call.\" }}\n    {{- 'Respond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.' }}\n    {{- \"Do not use variables.\\n\\n\" }}\n    {%- for t in tools %}\n        {{- t | tojson(indent=4) }}\n        {{- \"\\n\\n\" }}\n    {%- endfor %}\n{%- endif %}\n{{- system_message }}\n{{- \"<|eot_id|>\" }}\n\n{#- Custom tools are passed in a user message with some extra guidance #}\n{%- if tools_in_user_message and not tools is none %}\n    {#- Extract the first user message so we can plug it in here #}\n    {%- if messages | length != 0 %}\n        {%- set first_user_message = messages[0]['content']|trim %}\n        {%- set messages = messages[1:] %}\n    {%- else %}\n        {{- raise_exception(\"Cannot put tools in the first user message when there's no first user message!\") }}\n{%- endif %}\n    {{- '<|start_header_id|>user<|end_header_id|>\\n\\n' -}}\n    {{- \"Given the following functions, please respond with a JSON for a function call \" }}\n    {{- \"with its proper arguments that best answers the given prompt.\\n\\n\" }}\n    {{- 'Respond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.' }}\n    {{- \"Do not use variables.\\n\\n\" }}\n    {%- for t in tools %}\n        {{- t | tojson(indent=4) }}\n        {{- \"\\n\\n\" }}\n    {%- endfor %}\n    {{- first_user_message + \"<|eot_id|>\"}}\n{%- endif %}\n\n{%- for message in messages %}\n    {%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool_calls' in message) %}\n        {{- '<|start_header_id|>' + message['role'] + '<|end_header_id|>\\n\\n'+ message['content'] | trim + '<|eot_id|>' }}\n    {%- elif 'tool_calls' in message %}\n        {%- if not message.tool_calls|length == 1 %}\n            {{- raise_exception(\"This model only supports single tool-calls at once!\") }}\n        {%- endif %}\n        {%- set tool_call = message.tool_calls[0].function %}\n        {{- '<|start_header_id|>assistant<|end_header_id|>\\n\\n' -}}\n        {{- '{\"name\": \"' + tool_call.name + '\", ' }}\n        {{- '\"parameters\": ' }}\n        {{- tool_call.arguments | tojson }}\n        {{- \"}\" }}\n        {{- \"<|eot_id|>\" }}\n    {%- elif message.role == \"tool\" or message.role == \"ipython\" %}\n        {{- \"<|start_header_id|>ipython<|end_header_id|>\\n\\n\" }}\n        {%- if message.content is mapping or message.content is iterable %}\n            {{- message.content | tojson }}\n        {%- else %}\n            {{- message.content }}\n        {%- endif %}\n        {{- \"<|eot_id|>\" }}\n    {%- endif %}\n{%- endfor %}\n{%- if add_generation_prompt %}\n    {{- '<|start_header_id|>assistant<|end_header_id|>\\n\\n' }}\n{%- endif %}\n",
  "chat_template_sha": "5816fce10444e03c2e9ee1ef8a4a1ea61ae7e69e438613f3b17b69d0426223a4",
  "start_time": 2802319.966239276,
  "end_time": 2802470.613861713,
  "total_evaluation_time_seconds": "150.64762243721634"
}
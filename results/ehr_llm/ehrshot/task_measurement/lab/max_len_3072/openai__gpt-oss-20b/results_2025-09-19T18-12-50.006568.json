{
  "results": {
    "group_ehrshot_measurement_lab_tasks_gu": {
      "recall_gu_yn,binary_yn": 0.059250545663274395,
      "recall_gu_yn_stderr,binary_yn": "N/A",
      "exact_match,binary_yn": 0.7663642255346728,
      "exact_match_stderr,binary_yn": 0.007464186759043879,
      "f1_gu_yn,binary_yn": 0.1066621173811222,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "alias": "group_ehrshot_measurement_lab_tasks_gu"
    },
    "ehrshot_measurement_lab_albumin_gu": {
      "alias": " - ehrshot_measurement_lab_albumin_gu",
      "exact_match,binary_yn": 0.6983050847457627,
      "exact_match_stderr,binary_yn": 0.026769048362196363,
      "f1_gu_yn,binary_yn": 0.02197802197802198,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.011363636363636364,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_alt_gu": {
      "alias": " - ehrshot_measurement_lab_alt_gu",
      "exact_match,binary_yn": 0.81,
      "exact_match_stderr,binary_yn": 0.022687347113832926,
      "f1_gu_yn,binary_yn": 0.03389830508474576,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.017543859649122806,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_ast_gu": {
      "alias": " - ehrshot_measurement_lab_ast_gu",
      "exact_match,binary_yn": 0.8193979933110368,
      "exact_match_stderr,binary_yn": 0.022284382368524123,
      "f1_gu_yn,binary_yn": 0.15625,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.08771929824561403,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_bilirubin_gu": {
      "alias": " - ehrshot_measurement_lab_bilirubin_gu",
      "exact_match,binary_yn": 0.9522184300341296,
      "exact_match_stderr,binary_yn": 0.012482658043887963,
      "f1_gu_yn,binary_yn": 0.125,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.06666666666666667,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_bun_gu": {
      "alias": " - ehrshot_measurement_lab_bun_gu",
      "exact_match,binary_yn": 0.7827380952380952,
      "exact_match_stderr,binary_yn": 0.022530852446005684,
      "f1_gu_yn,binary_yn": 0.05194805194805195,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.02702702702702703,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_creatinine_gu": {
      "alias": " - ehrshot_measurement_lab_creatinine_gu",
      "exact_match,binary_yn": 0.7565217391304347,
      "exact_match_stderr,binary_yn": 0.02313990546361016,
      "f1_gu_yn,binary_yn": 0.16,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.08791208791208792,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_crp_gu": {
      "alias": " - ehrshot_measurement_lab_crp_gu",
      "exact_match,binary_yn": 0.6363636363636364,
      "exact_match_stderr,binary_yn": 0.10497277621629558,
      "f1_gu_yn,binary_yn": 0.0,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.0,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_glucose_gu": {
      "alias": " - ehrshot_measurement_lab_glucose_gu",
      "exact_match,binary_yn": 0.75,
      "exact_match_stderr,binary_yn": 0.023658011170369194,
      "f1_gu_yn,binary_yn": 0.06666666666666667,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.03614457831325301,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_hba1c_gu": {
      "alias": " - ehrshot_measurement_lab_hba1c_gu",
      "exact_match,binary_yn": 0.6627906976744186,
      "exact_match_stderr,binary_yn": 0.051277697106989796,
      "f1_gu_yn,binary_yn": 0.32558139534883723,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.20588235294117646,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_hemoglobin_gu": {
      "alias": " - ehrshot_measurement_lab_hemoglobin_gu",
      "exact_match,binary_yn": 0.5963855421686747,
      "exact_match_stderr,binary_yn": 0.026967017297730666,
      "f1_gu_yn,binary_yn": 0.1728395061728395,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.09523809523809523,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_ldl_gu": {
      "alias": " - ehrshot_measurement_lab_ldl_gu",
      "exact_match,binary_yn": 0.7857142857142857,
      "exact_match_stderr,binary_yn": 0.07896725691322383,
      "f1_gu_yn,binary_yn": 0.25,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.16666666666666666,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_platelets_gu": {
      "alias": " - ehrshot_measurement_lab_platelets_gu",
      "exact_match,binary_yn": 0.7798165137614679,
      "exact_match_stderr,binary_yn": 0.022949846533455016,
      "f1_gu_yn,binary_yn": 0.07692307692307693,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.04054054054054054,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_totalcholesterol_gu": {
      "alias": " - ehrshot_measurement_lab_totalcholesterol_gu",
      "exact_match,binary_yn": 0.8045977011494253,
      "exact_match_stderr,binary_yn": 0.04275678110973869,
      "f1_gu_yn,binary_yn": 0.19047619047619047,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.1111111111111111,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    }
  },
  "groups": {
    "group_ehrshot_measurement_lab_tasks_gu": {
      "recall_gu_yn,binary_yn": 0.059250545663274395,
      "recall_gu_yn_stderr,binary_yn": "N/A",
      "exact_match,binary_yn": 0.7663642255346728,
      "exact_match_stderr,binary_yn": 0.007464186759043879,
      "f1_gu_yn,binary_yn": 0.1066621173811222,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "alias": "group_ehrshot_measurement_lab_tasks_gu"
    }
  },
  "group_subtasks": {
    "group_ehrshot_measurement_lab_tasks_gu": [
      "ehrshot_measurement_lab_albumin_gu",
      "ehrshot_measurement_lab_alt_gu",
      "ehrshot_measurement_lab_ast_gu",
      "ehrshot_measurement_lab_bilirubin_gu",
      "ehrshot_measurement_lab_bun_gu",
      "ehrshot_measurement_lab_creatinine_gu",
      "ehrshot_measurement_lab_crp_gu",
      "ehrshot_measurement_lab_glucose_gu",
      "ehrshot_measurement_lab_hba1c_gu",
      "ehrshot_measurement_lab_hemoglobin_gu",
      "ehrshot_measurement_lab_ldl_gu",
      "ehrshot_measurement_lab_platelets_gu",
      "ehrshot_measurement_lab_totalcholesterol_gu"
    ]
  },
  "configs": {
    "ehrshot_measurement_lab_albumin_gu": {
      "task": "ehrshot_measurement_lab_albumin_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/albumin_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for albumin: predict next measurement normal/abnormal status (≥3.5 g/dL = normal, <3.5 g/dL = abnormal)",
        "pretrained": "openai/gpt-oss-20b",
        "dtype": "bfloat16",
        "max_length": 3072,
        "trust_remote_code": true,
        "device_map": "auto",
        "enable_thinking": true,
        "think_end_token": "assistantfinal",
        "model_name": "openai/gpt-oss-20b",
        "max_model_len": "3072",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_alt_gu": {
      "task": "ehrshot_measurement_lab_alt_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/alt_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for ALT: predict next measurement normal/abnormal status (≤50 [U]/L = normal, >50 [U]/L = abnormal)",
        "pretrained": "openai/gpt-oss-20b",
        "dtype": "bfloat16",
        "max_length": 3072,
        "trust_remote_code": true,
        "device_map": "auto",
        "enable_thinking": true,
        "think_end_token": "assistantfinal",
        "model_name": "openai/gpt-oss-20b",
        "max_model_len": "3072",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_ast_gu": {
      "task": "ehrshot_measurement_lab_ast_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/ast_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for AST: predict next measurement normal/abnormal status (≤40 [U]/L = normal, >40 [U]/L = abnormal)",
        "pretrained": "openai/gpt-oss-20b",
        "dtype": "bfloat16",
        "max_length": 3072,
        "trust_remote_code": true,
        "device_map": "auto",
        "enable_thinking": true,
        "think_end_token": "assistantfinal",
        "model_name": "openai/gpt-oss-20b",
        "max_model_len": "3072",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_bilirubin_gu": {
      "task": "ehrshot_measurement_lab_bilirubin_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/bilirubin_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for bilirubin: predict next measurement normal/abnormal status (≤1.2 mg/dL = normal, >1.2 mg/dL = abnormal)",
        "pretrained": "openai/gpt-oss-20b",
        "dtype": "bfloat16",
        "max_length": 3072,
        "trust_remote_code": true,
        "device_map": "auto",
        "enable_thinking": true,
        "think_end_token": "assistantfinal",
        "model_name": "openai/gpt-oss-20b",
        "max_model_len": "3072",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_bun_gu": {
      "task": "ehrshot_measurement_lab_bun_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/bun_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for BUN: predict next measurement normal/abnormal status (6-24 mg/dL = normal, <6 or >24 mg/dL = abnormal)",
        "pretrained": "openai/gpt-oss-20b",
        "dtype": "bfloat16",
        "max_length": 3072,
        "trust_remote_code": true,
        "device_map": "auto",
        "enable_thinking": true,
        "think_end_token": "assistantfinal",
        "model_name": "openai/gpt-oss-20b",
        "max_model_len": "3072",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_creatinine_gu": {
      "task": "ehrshot_measurement_lab_creatinine_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/creatinine_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for creatinine: predict next measurement normal/abnormal status (≤1.2 mg/dL = normal, >1.2 mg/dL = abnormal)",
        "pretrained": "openai/gpt-oss-20b",
        "dtype": "bfloat16",
        "max_length": 3072,
        "trust_remote_code": true,
        "device_map": "auto",
        "enable_thinking": true,
        "think_end_token": "assistantfinal",
        "model_name": "openai/gpt-oss-20b",
        "max_model_len": "3072",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_crp_gu": {
      "task": "ehrshot_measurement_lab_crp_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/crp_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for CRP: predict next measurement normal/abnormal status (≤1 mg/dL = normal, >1 mg/dL = abnormal)",
        "pretrained": "openai/gpt-oss-20b",
        "dtype": "bfloat16",
        "max_length": 3072,
        "trust_remote_code": true,
        "device_map": "auto",
        "enable_thinking": true,
        "think_end_token": "assistantfinal",
        "model_name": "openai/gpt-oss-20b",
        "max_model_len": "3072",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_glucose_gu": {
      "task": "ehrshot_measurement_lab_glucose_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/glucose_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for glucose: predict next measurement normal/abnormal status (≤126 mg/dL = normal, >126 mg/dL = abnormal)",
        "pretrained": "openai/gpt-oss-20b",
        "dtype": "bfloat16",
        "max_length": 3072,
        "trust_remote_code": true,
        "device_map": "auto",
        "enable_thinking": true,
        "think_end_token": "assistantfinal",
        "model_name": "openai/gpt-oss-20b",
        "max_model_len": "3072",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_hba1c_gu": {
      "task": "ehrshot_measurement_lab_hba1c_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/hba1c_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for HbA1c: predict next measurement normal/abnormal status (≤6.5% = normal, >6.5% = abnormal)",
        "pretrained": "openai/gpt-oss-20b",
        "dtype": "bfloat16",
        "max_length": 3072,
        "trust_remote_code": true,
        "device_map": "auto",
        "enable_thinking": true,
        "think_end_token": "assistantfinal",
        "model_name": "openai/gpt-oss-20b",
        "max_model_len": "3072",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_hemoglobin_gu": {
      "task": "ehrshot_measurement_lab_hemoglobin_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/hemoglobin_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for hemoglobin: predict next measurement normal/abnormal status (≥12 g/dL = normal, <12 g/dL = abnormal)",
        "pretrained": "openai/gpt-oss-20b",
        "dtype": "bfloat16",
        "max_length": 3072,
        "trust_remote_code": true,
        "device_map": "auto",
        "enable_thinking": true,
        "think_end_token": "assistantfinal",
        "model_name": "openai/gpt-oss-20b",
        "max_model_len": "3072",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_ldl_gu": {
      "task": "ehrshot_measurement_lab_ldl_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/ldl_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for LDL cholesterol: predict next measurement normal/abnormal status (≤130 mg/dL = normal, >130 mg/dL = abnormal)",
        "pretrained": "openai/gpt-oss-20b",
        "dtype": "bfloat16",
        "max_length": 3072,
        "trust_remote_code": true,
        "device_map": "auto",
        "enable_thinking": true,
        "think_end_token": "assistantfinal",
        "model_name": "openai/gpt-oss-20b",
        "max_model_len": "3072",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_platelets_gu": {
      "task": "ehrshot_measurement_lab_platelets_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/platelets_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for platelets: predict next measurement normal/abnormal status (150-450 10*3/uL = normal, <150 or >450 10*3/uL = abnormal)",
        "pretrained": "openai/gpt-oss-20b",
        "dtype": "bfloat16",
        "max_length": 3072,
        "trust_remote_code": true,
        "device_map": "auto",
        "enable_thinking": true,
        "think_end_token": "assistantfinal",
        "model_name": "openai/gpt-oss-20b",
        "max_model_len": "3072",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_totalcholesterol_gu": {
      "task": "ehrshot_measurement_lab_totalcholesterol_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/totalcholesterol_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for total cholesterol: predict next measurement normal/abnormal status (≤200 mg/dL = normal, >200 mg/dL = abnormal)",
        "pretrained": "openai/gpt-oss-20b",
        "dtype": "bfloat16",
        "max_length": 3072,
        "trust_remote_code": true,
        "device_map": "auto",
        "enable_thinking": true,
        "think_end_token": "assistantfinal",
        "model_name": "openai/gpt-oss-20b",
        "max_model_len": "3072",
        "task_name": "measurement_lab"
      }
    }
  },
  "versions": {
    "ehrshot_measurement_lab_albumin_gu": "Yaml",
    "ehrshot_measurement_lab_alt_gu": "Yaml",
    "ehrshot_measurement_lab_ast_gu": "Yaml",
    "ehrshot_measurement_lab_bilirubin_gu": "Yaml",
    "ehrshot_measurement_lab_bun_gu": "Yaml",
    "ehrshot_measurement_lab_creatinine_gu": "Yaml",
    "ehrshot_measurement_lab_crp_gu": "Yaml",
    "ehrshot_measurement_lab_glucose_gu": "Yaml",
    "ehrshot_measurement_lab_hba1c_gu": "Yaml",
    "ehrshot_measurement_lab_hemoglobin_gu": "Yaml",
    "ehrshot_measurement_lab_ldl_gu": "Yaml",
    "ehrshot_measurement_lab_platelets_gu": "Yaml",
    "ehrshot_measurement_lab_totalcholesterol_gu": "Yaml",
    "group_ehrshot_measurement_lab_tasks_gu": 1.0
  },
  "n-shot": {
    "ehrshot_measurement_lab_albumin_gu": 0,
    "ehrshot_measurement_lab_alt_gu": 0,
    "ehrshot_measurement_lab_ast_gu": 0,
    "ehrshot_measurement_lab_bilirubin_gu": 0,
    "ehrshot_measurement_lab_bun_gu": 0,
    "ehrshot_measurement_lab_creatinine_gu": 0,
    "ehrshot_measurement_lab_crp_gu": 0,
    "ehrshot_measurement_lab_glucose_gu": 0,
    "ehrshot_measurement_lab_hba1c_gu": 0,
    "ehrshot_measurement_lab_hemoglobin_gu": 0,
    "ehrshot_measurement_lab_ldl_gu": 0,
    "ehrshot_measurement_lab_platelets_gu": 0,
    "ehrshot_measurement_lab_totalcholesterol_gu": 0
  },
  "higher_is_better": {
    "ehrshot_measurement_lab_albumin_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_alt_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_ast_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_bilirubin_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_bun_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_creatinine_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_crp_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_glucose_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_hba1c_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_hemoglobin_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_ldl_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_platelets_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_totalcholesterol_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "group_ehrshot_measurement_lab_tasks_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    }
  },
  "n-samples": {
    "ehrshot_measurement_lab_albumin_gu": {
      "original": 295,
      "effective": 295
    },
    "ehrshot_measurement_lab_alt_gu": {
      "original": 300,
      "effective": 300
    },
    "ehrshot_measurement_lab_ast_gu": {
      "original": 299,
      "effective": 299
    },
    "ehrshot_measurement_lab_bilirubin_gu": {
      "original": 293,
      "effective": 293
    },
    "ehrshot_measurement_lab_bun_gu": {
      "original": 336,
      "effective": 336
    },
    "ehrshot_measurement_lab_creatinine_gu": {
      "original": 345,
      "effective": 345
    },
    "ehrshot_measurement_lab_crp_gu": {
      "original": 22,
      "effective": 22
    },
    "ehrshot_measurement_lab_glucose_gu": {
      "original": 336,
      "effective": 336
    },
    "ehrshot_measurement_lab_hba1c_gu": {
      "original": 86,
      "effective": 86
    },
    "ehrshot_measurement_lab_hemoglobin_gu": {
      "original": 332,
      "effective": 332
    },
    "ehrshot_measurement_lab_ldl_gu": {
      "original": 28,
      "effective": 28
    },
    "ehrshot_measurement_lab_platelets_gu": {
      "original": 327,
      "effective": 327
    },
    "ehrshot_measurement_lab_totalcholesterol_gu": {
      "original": 87,
      "effective": 87
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=openai/gpt-oss-20b,dtype=bfloat16,max_length=3072,trust_remote_code=true,device_map=auto,enable_thinking=True,think_end_token=assistantfinal",
    "model_num_parameters": 20914757184,
    "model_dtype": "torch.bfloat16",
    "model_revision": "main",
    "model_sha": "6cee5e81ee83917806bbde320786a8fb61efebee",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "1a14f07a",
  "date": 1758310067.5169806,
  "pretty_env_info": "PyTorch version: 2.6.0+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: Red Hat Enterprise Linux release 8.10 (Ootpa) (x86_64)\nGCC version: (GCC) 8.5.0 20210514 (Red Hat 8.5.0-26)\nClang version: Could not collect\nCMake version: Could not collect\nLibc version: glibc-2.28\n\nPython version: 3.12.11 | packaged by conda-forge | (main, Jun  4 2025, 14:45:31) [GCC 13.3.0] (64-bit runtime)\nPython platform: Linux-4.18.0-553.52.1.el8_10.x86_64-x86_64-with-glibc2.28\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: GPU 0: NVIDIA H200\nNvidia driver version: 570.133.20\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:        x86_64\nCPU op-mode(s):      32-bit, 64-bit\nByte Order:          Little Endian\nCPU(s):              48\nOn-line CPU(s) list: 0-47\nThread(s) per core:  1\nCore(s) per socket:  24\nSocket(s):           2\nNUMA node(s):        2\nVendor ID:           GenuineIntel\nCPU family:          6\nModel:               207\nModel name:          INTEL(R) XEON(R) GOLD 6542Y\nStepping:            2\nCPU MHz:             3599.634\nCPU max MHz:         4100.0000\nCPU min MHz:         800.0000\nBogoMIPS:            5800.00\nL1d cache:           48K\nL1i cache:           32K\nL2 cache:            2048K\nL3 cache:            61440K\nNUMA node0 CPU(s):   0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46\nNUMA node1 CPU(s):   1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 monitor ds_cpl smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cat_l2 cdp_l3 invpcid_single cdp_l2 ssbd mba ibrs ibpb stibp ibrs_enhanced fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb intel_pt avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local split_lock_detect avx_vnni avx512_bf16 wbnoinvd dtherm ida arat pln pts hfi avx512vbmi umip pku ospke waitpkg avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg tme avx512_vpopcntdq la57 rdpid bus_lock_detect cldemote movdiri movdir64b enqcmd fsrm md_clear serialize tsxldtrk pconfig arch_lbr amx_bf16 avx512_fp16 amx_tile amx_int8 flush_l1d arch_capabilities\n\nVersions of relevant libraries:\n[pip3] numpy==2.2.6\n[pip3] nvidia-cublas-cu12==12.4.5.8\n[pip3] nvidia-cuda-cupti-cu12==12.4.127\n[pip3] nvidia-cuda-nvrtc-cu12==12.4.127\n[pip3] nvidia-cuda-runtime-cu12==12.4.127\n[pip3] nvidia-cudnn-cu12==9.1.0.70\n[pip3] nvidia-cudnn-frontend==1.14.1\n[pip3] nvidia-cufft-cu12==11.2.1.3\n[pip3] nvidia-curand-cu12==10.3.5.147\n[pip3] nvidia-cusolver-cu12==11.6.1.9\n[pip3] nvidia-cusparse-cu12==12.3.1.170\n[pip3] nvidia-cusparselt-cu12==0.6.2\n[pip3] nvidia-nccl-cu12==2.21.5\n[pip3] nvidia-nvjitlink-cu12==12.4.127\n[pip3] nvidia-nvtx-cu12==12.4.127\n[pip3] torch==2.6.0\n[pip3] torchaudio==2.6.0\n[pip3] torchvision==0.21.0\n[pip3] triton==3.2.0\n[conda] numpy                     2.2.6                    pypi_0    pypi\n[conda] nvidia-cublas-cu12        12.4.5.8                 pypi_0    pypi\n[conda] nvidia-cuda-cupti-cu12    12.4.127                 pypi_0    pypi\n[conda] nvidia-cuda-nvrtc-cu12    12.4.127                 pypi_0    pypi\n[conda] nvidia-cuda-runtime-cu12  12.4.127                 pypi_0    pypi\n[conda] nvidia-cudnn-cu12         9.1.0.70                 pypi_0    pypi\n[conda] nvidia-cudnn-frontend     1.14.1                   pypi_0    pypi\n[conda] nvidia-cufft-cu12         11.2.1.3                 pypi_0    pypi\n[conda] nvidia-curand-cu12        10.3.5.147               pypi_0    pypi\n[conda] nvidia-cusolver-cu12      11.6.1.9                 pypi_0    pypi\n[conda] nvidia-cusparse-cu12      12.3.1.170               pypi_0    pypi\n[conda] nvidia-cusparselt-cu12    0.6.2                    pypi_0    pypi\n[conda] nvidia-nccl-cu12          2.21.5                   pypi_0    pypi\n[conda] nvidia-nvjitlink-cu12     12.4.127                 pypi_0    pypi\n[conda] nvidia-nvtx-cu12          12.4.127                 pypi_0    pypi\n[conda] torch                     2.6.0                    pypi_0    pypi\n[conda] torchaudio                2.6.0                    pypi_0    pypi\n[conda] torchvision               0.21.0                   pypi_0    pypi\n[conda] triton                    3.2.0                    pypi_0    pypi",
  "transformers_version": "4.56.1",
  "lm_eval_version": "0.4.9.1",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|endoftext|>",
    "199999"
  ],
  "tokenizer_eos_token": [
    "<|return|>",
    "200002"
  ],
  "tokenizer_bos_token": [
    "<|startoftext|>",
    "199998"
  ],
  "eot_token_id": 200002,
  "max_length": 3072,
  "task_hashes": {},
  "model_source": "hf",
  "model_name": "openai/gpt-oss-20b",
  "model_name_sanitized": "openai__gpt-oss-20b",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": "{#-\n  In addition to the normal inputs of `messages` and `tools`, this template also accepts the\n  following kwargs:\n  - \"builtin_tools\": A list, can contain \"browser\" and/or \"python\".\n  - \"model_identity\": A string that optionally describes the model identity.\n  - \"reasoning_effort\": A string that describes the reasoning effort, defaults to \"medium\".\n #}\n\n{#- Tool Definition Rendering ============================================== #}\n{%- macro render_typescript_type(param_spec, required_params, is_nullable=false) -%}\n    {%- if param_spec.type == \"array\" -%}\n        {%- if param_spec['items'] -%}\n            {%- if param_spec['items']['type'] == \"string\" -%}\n                {{- \"string[]\" }}\n            {%- elif param_spec['items']['type'] == \"number\" -%}\n                {{- \"number[]\" }}\n            {%- elif param_spec['items']['type'] == \"integer\" -%}\n                {{- \"number[]\" }}\n            {%- elif param_spec['items']['type'] == \"boolean\" -%}\n                {{- \"boolean[]\" }}\n            {%- else -%}\n                {%- set inner_type = render_typescript_type(param_spec['items'], required_params) -%}\n                {%- if inner_type == \"object | object\" or inner_type|length > 50 -%}\n                    {{- \"any[]\" }}\n                {%- else -%}\n                    {{- inner_type + \"[]\" }}\n                {%- endif -%}\n            {%- endif -%}\n            {%- if param_spec.nullable -%}\n                {{- \" | null\" }}\n            {%- endif -%}\n        {%- else -%}\n            {{- \"any[]\" }}\n            {%- if param_spec.nullable -%}\n                {{- \" | null\" }}\n            {%- endif -%}\n        {%- endif -%}\n    {%- elif param_spec.type is defined and param_spec.type is iterable and param_spec.type is not string and param_spec.type is not mapping and param_spec.type[0] is defined -%}\n        {#- Handle array of types like [\"object\", \"object\"] from Union[dict, list] #}\n        {%- if param_spec.type | length > 1 -%}\n            {{- param_spec.type | join(\" | \") }}\n        {%- else -%}\n            {{- param_spec.type[0] }}\n        {%- endif -%}\n    {%- elif param_spec.oneOf -%}\n        {#- Handle oneOf schemas - check for complex unions and fallback to any #}\n        {%- set has_object_variants = false -%}\n        {%- for variant in param_spec.oneOf -%}\n            {%- if variant.type == \"object\" -%}\n                {%- set has_object_variants = true -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- if has_object_variants and param_spec.oneOf|length > 1 -%}\n            {{- \"any\" }}\n        {%- else -%}\n            {%- for variant in param_spec.oneOf -%}\n                {{- render_typescript_type(variant, required_params) -}}\n                {%- if variant.description %}\n                    {{- \"// \" + variant.description }}\n                {%- endif -%}\n                {%- if variant.default is defined %}\n                    {{ \"// default: \" + variant.default|tojson }}\n                {%- endif -%}\n                {%- if not loop.last %}\n                    {{- \" | \" }}\n                {% endif -%}\n            {%- endfor -%}\n        {%- endif -%}\n    {%- elif param_spec.type == \"string\" -%}\n        {%- if param_spec.enum -%}\n            {{- '\"' + param_spec.enum|join('\" | \"') + '\"' -}}\n        {%- else -%}\n            {{- \"string\" }}\n            {%- if param_spec.nullable %}\n                {{- \" | null\" }}\n            {%- endif -%}\n        {%- endif -%}\n    {%- elif param_spec.type == \"number\" -%}\n        {{- \"number\" }}\n    {%- elif param_spec.type == \"integer\" -%}\n        {{- \"number\" }}\n    {%- elif param_spec.type == \"boolean\" -%}\n        {{- \"boolean\" }}\n\n    {%- elif param_spec.type == \"object\" -%}\n        {%- if param_spec.properties -%}\n            {{- \"{\\n\" }}\n            {%- for prop_name, prop_spec in param_spec.properties.items() -%}\n                {{- prop_name -}}\n                {%- if prop_name not in (param_spec.required or []) -%}\n                    {{- \"?\" }}\n                {%- endif -%}\n                {{- \": \" }}\n                {{ render_typescript_type(prop_spec, param_spec.required or []) }}\n                {%- if not loop.last -%}\n                    {{-\", \" }}\n                {%- endif -%}\n            {%- endfor -%}\n            {{- \"}\" }}\n        {%- else -%}\n            {{- \"object\" }}\n        {%- endif -%}\n    {%- else -%}\n        {{- \"any\" }}\n    {%- endif -%}\n{%- endmacro -%}\n\n{%- macro render_tool_namespace(namespace_name, tools) -%}\n    {{- \"## \" + namespace_name + \"\\n\\n\" }}\n    {{- \"namespace \" + namespace_name + \" {\\n\\n\" }}\n    {%- for tool in tools %}\n        {%- set tool = tool.function %}\n        {{- \"// \" + tool.description + \"\\n\" }}\n        {{- \"type \"+ tool.name + \" = \" }}\n        {%- if tool.parameters and tool.parameters.properties %}\n            {{- \"(_: {\\n\" }}\n            {%- for param_name, param_spec in tool.parameters.properties.items() %}\n                {%- if param_spec.description %}\n                    {{- \"// \" + param_spec.description + \"\\n\" }}\n                {%- endif %}\n                {{- param_name }}\n                {%- if param_name not in (tool.parameters.required or []) -%}\n                    {{- \"?\" }}\n                {%- endif -%}\n                {{- \": \" }}\n                {{- render_typescript_type(param_spec, tool.parameters.required or []) }}\n                {%- if param_spec.default is defined -%}\n                    {%- if param_spec.enum %}\n                        {{- \", // default: \" + param_spec.default }}\n                    {%- elif param_spec.oneOf %}\n                        {{- \"// default: \" + param_spec.default }}\n                    {%- else %}\n                        {{- \", // default: \" + param_spec.default|tojson }}\n                    {%- endif -%}\n                {%- endif -%}\n                {%- if not loop.last %}\n                    {{- \",\\n\" }}\n                {%- else %}\n                    {{- \",\\n\" }}\n                {%- endif -%}\n            {%- endfor %}\n            {{- \"}) => any;\\n\\n\" }}\n        {%- else -%}\n            {{- \"() => any;\\n\\n\" }}\n        {%- endif -%}\n    {%- endfor %}\n    {{- \"} // namespace \" + namespace_name }}\n{%- endmacro -%}\n\n{%- macro render_builtin_tools(browser_tool, python_tool) -%}\n    {%- if browser_tool %}\n        {{- \"## browser\\n\\n\" }}\n        {{- \"// Tool for browsing.\\n\" }}\n        {{- \"// The `cursor` appears in brackets before each browsing display: `[{cursor}]`.\\n\" }}\n        {{- \"// Cite information from the tool using the following format:\\n\" }}\n        {{- \"// `【{cursor}†L{line_start}(-L{line_end})?】`, for example: `【6†L9-L11】` or `【8†L3】`.\\n\" }}\n        {{- \"// Do not quote more than 10 words directly from the tool output.\\n\" }}\n        {{- \"// sources=web (default: web)\\n\" }}\n        {{- \"namespace browser {\\n\\n\" }}\n        {{- \"// Searches for information related to `query` and displays `topn` results.\\n\" }}\n        {{- \"type search = (_: {\\n\" }}\n        {{- \"query: string,\\n\" }}\n        {{- \"topn?: number, // default: 10\\n\" }}\n        {{- \"source?: string,\\n\" }}\n        {{- \"}) => any;\\n\\n\" }}\n        {{- \"// Opens the link `id` from the page indicated by `cursor` starting at line number `loc`, showing `num_lines` lines.\\n\" }}\n        {{- \"// Valid link ids are displayed with the formatting: `【{id}†.*】`.\\n\" }}\n        {{- \"// If `cursor` is not provided, the most recent page is implied.\\n\" }}\n        {{- \"// If `id` is a string, it is treated as a fully qualified URL associated with `source`.\\n\" }}\n        {{- \"// If `loc` is not provided, the viewport will be positioned at the beginning of the document or centered on the most relevant passage, if available.\\n\" }}\n        {{- \"// Use this function without `id` to scroll to a new location of an opened page.\\n\" }}\n        {{- \"type open = (_: {\\n\" }}\n        {{- \"id?: number | string, // default: -1\\n\" }}\n        {{- \"cursor?: number, // default: -1\\n\" }}\n        {{- \"loc?: number, // default: -1\\n\" }}\n        {{- \"num_lines?: number, // default: -1\\n\" }}\n        {{- \"view_source?: boolean, // default: false\\n\" }}\n        {{- \"source?: string,\\n\" }}\n        {{- \"}) => any;\\n\\n\" }}\n        {{- \"// Finds exact matches of `pattern` in the current page, or the page given by `cursor`.\\n\" }}\n        {{- \"type find = (_: {\\n\" }}\n        {{- \"pattern: string,\\n\" }}\n        {{- \"cursor?: number, // default: -1\\n\" }}\n        {{- \"}) => any;\\n\\n\" }}\n        {{- \"} // namespace browser\\n\\n\" }}\n    {%- endif -%}\n\n    {%- if python_tool %}\n        {{- \"## python\\n\\n\" }}\n        {{- \"Use this tool to execute Python code in your chain of thought. The code will not be shown to the user. This tool should be used for internal reasoning, but not for code that is intended to be visible to the user (e.g. when creating plots, tables, or files).\\n\\n\" }}\n        {{- \"When you send a message containing Python code to python, it will be executed in a stateful Jupyter notebook environment. python will respond with the output of the execution or time out after 120.0 seconds. The drive at '/mnt/data' can be used to save and persist user files. Internet access for this session is UNKNOWN. Depends on the cluster.\\n\\n\" }}\n    {%- endif -%}\n{%- endmacro -%}\n\n{#- System Message Construction ============================================ #}\n{%- macro build_system_message() -%}\n    {%- if model_identity is not defined %}\n        {%- set model_identity = \"You are ChatGPT, a large language model trained by OpenAI.\" %}\n    {%- endif %}\n    {{- model_identity + \"\\n\" }}\n    {{- \"Knowledge cutoff: 2024-06\\n\" }}\n    {{- \"Current date: \" + strftime_now(\"%Y-%m-%d\") + \"\\n\\n\" }}\n    {%- if reasoning_effort is not defined %}\n        {%- set reasoning_effort = \"medium\" %}\n    {%- endif %}\n    {{- \"Reasoning: \" + reasoning_effort + \"\\n\\n\" }}\n    {%- if builtin_tools %}\n        {{- \"# Tools\\n\\n\" }}\n        {%- set available_builtin_tools = namespace(browser=false, python=false) %}\n        {%- for tool in builtin_tools %}\n            {%- if tool == \"browser\" %}\n                {%- set available_builtin_tools.browser = true %}\n            {%- elif tool == \"python\" %}\n                {%- set available_builtin_tools.python = true %}\n            {%- endif %}\n        {%- endfor %}\n        {{- render_builtin_tools(available_builtin_tools.browser, available_builtin_tools.python) }}\n    {%- endif -%}\n    {{- \"# Valid channels: analysis, commentary, final. Channel must be included for every message.\" }}\n    {%- if tools -%}\n        {{- \"\\nCalls to these tools must go to the commentary channel: 'functions'.\" }}\n    {%- endif -%}\n{%- endmacro -%}\n\n{#- Main Template Logic ================================================= #}\n{#- Set defaults #}\n\n{#- Render system message #}\n{{- \"<|start|>system<|message|>\" }}\n{{- build_system_message() }}\n{{- \"<|end|>\" }}\n\n{#- Extract developer message #}\n{%- if messages[0].role == \"developer\" or messages[0].role == \"system\" %}\n    {%- set developer_message = messages[0].content %}\n    {%- set loop_messages = messages[1:] %}\n{%- else %}\n    {%- set developer_message = \"\" %}\n    {%- set loop_messages = messages %}\n{%- endif %}\n\n{#- Render developer message #}\n{%- if developer_message or tools %}\n    {{- \"<|start|>developer<|message|>\" }}\n    {%- if developer_message %}\n        {{- \"# Instructions\\n\\n\" }}\n        {{- developer_message }}\n        {{- \"\\n\\n\" }}\n    {%- endif %}\n    {%- if tools -%}\n        {{- \"# Tools\\n\\n\" }}\n        {{- render_tool_namespace(\"functions\", tools) }}\n    {%- endif -%}\n    {{- \"<|end|>\" }}\n{%- endif %}\n\n{#- Render messages #}\n{%- set last_tool_call = namespace(name=none) %}\n{%- for message in loop_messages -%}\n    {#- At this point only assistant/user/tool messages should remain #}\n    {%- if message.role == 'assistant' -%}\n        {#- Checks to ensure the messages are being passed in the format we expect #}\n        {%- if \"content\" in message %}\n            {%- if \"<|channel|>analysis<|message|>\" in message.content or \"<|channel|>final<|message|>\" in message.content %}\n                {{- raise_exception(\"You have passed a message containing <|channel|> tags in the content field. Instead of doing this, you should pass analysis messages (the string between '<|message|>' and '<|end|>') in the 'thinking' field, and final messages (the string between '<|message|>' and '<|end|>') in the 'content' field.\") }}\n            {%- endif %}\n        {%- endif %}\n        {%- if \"thinking\" in message %}\n            {%- if \"<|channel|>analysis<|message|>\" in message.thinking or \"<|channel|>final<|message|>\" in message.thinking %}\n                {{- raise_exception(\"You have passed a message containing <|channel|> tags in the thinking field. Instead of doing this, you should pass analysis messages (the string between '<|message|>' and '<|end|>') in the 'thinking' field, and final messages (the string between '<|message|>' and '<|end|>') in the 'content' field.\") }}\n            {%- endif %}\n        {%- endif %}\n        {%- if \"tool_calls\" in message %}\n            {#- We need very careful handling here - we want to drop the tool call analysis message if the model #}\n            {#- has output a later <|final|> message, but otherwise we want to retain it. This is the only case #}\n            {#- when we render CoT/analysis messages in inference. #}\n            {%- set future_final_message = namespace(found=false) %}\n            {%- for future_message in loop_messages[loop.index:] %}\n                {%- if future_message.role == 'assistant' and \"tool_calls\" not in future_message %}\n                    {%- set future_final_message.found = true %}\n                {%- endif %}\n            {%- endfor %}\n            {#- We assume max 1 tool call per message, and so we infer the tool call name #}\n            {#- in \"tool\" messages from the most recent assistant tool call name #}\n            {%- set tool_call = message.tool_calls[0] %}\n            {%- if tool_call.function %}\n                {%- set tool_call = tool_call.function %}\n            {%- endif %}\n            {%- if message.content and message.thinking %}\n                {{- raise_exception(\"Cannot pass both content and thinking in an assistant message with tool calls! Put the analysis message in one or the other, but not both.\") }}\n            {%- elif message.content and not future_final_message.found %}\n                {{- \"<|start|>assistant<|channel|>analysis<|message|>\" + message.content + \"<|end|>\" }}\n            {%- elif message.thinking and not future_final_message.found %}\n                {{- \"<|start|>assistant<|channel|>analysis<|message|>\" + message.thinking + \"<|end|>\" }}\n            {%- endif %}\n            {{- \"<|start|>assistant to=\" }}\n            {{- \"functions.\" + tool_call.name + \"<|channel|>commentary \" }}\n            {{- (tool_call.content_type if tool_call.content_type is defined else \"json\") + \"<|message|>\" }}\n            {{- tool_call.arguments|tojson }}\n            {{- \"<|call|>\" }}\n            {%- set last_tool_call.name = tool_call.name %}\n        {%- elif loop.last and not add_generation_prompt %}\n            {#- Only render the CoT if the final turn is an assistant turn and add_generation_prompt is false #}\n            {#- This is a situation that should only occur in training, never in inference. #}\n            {%- if \"thinking\" in message %}\n                {{- \"<|start|>assistant<|channel|>analysis<|message|>\" + message.thinking + \"<|end|>\" }}\n            {%- endif %}\n            {#- <|return|> indicates the end of generation, but <|end|> does not #}\n            {#- <|return|> should never be an input to the model, but we include it as the final token #}\n            {#- when training, so the model learns to emit it. #}\n            {{- \"<|start|>assistant<|channel|>final<|message|>\" + message.content + \"<|return|>\" }}\n        {%- else %}\n            {#- CoT is dropped during all previous turns, so we never render it for inference #}\n            {{- \"<|start|>assistant<|channel|>final<|message|>\" + message.content + \"<|end|>\" }}\n            {%- set last_tool_call.name = none %}\n        {%- endif %}\n    {%- elif message.role == 'tool' -%}\n        {%- if last_tool_call.name is none %}\n            {{- raise_exception(\"Message has tool role, but there was no previous assistant message with a tool call!\") }}\n        {%- endif %}\n        {{- \"<|start|>functions.\" + last_tool_call.name }}\n        {{- \" to=assistant<|channel|>commentary<|message|>\" + message.content|tojson + \"<|end|>\" }}\n    {%- elif message.role == 'user' -%}\n        {{- \"<|start|>user<|message|>\" + message.content + \"<|end|>\" }}\n    {%- endif -%}\n{%- endfor -%}\n\n{#- Generation prompt #}\n{%- if add_generation_prompt -%}\n<|start|>assistant\n{%- endif -%}",
  "chat_template_sha": "a4c9919cbbd4acdd51ccffe22da049264b1b73e59055fa58811a99efbd7c8146",
  "start_time": 6787122.506591976,
  "end_time": 6797030.690777948,
  "total_evaluation_time_seconds": "9908.184185972437"
}
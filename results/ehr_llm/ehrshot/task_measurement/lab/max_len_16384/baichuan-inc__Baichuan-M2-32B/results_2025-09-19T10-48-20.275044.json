{
  "results": {
    "group_ehrshot_measurement_lab_tasks_gu": {
      "exact_match,binary_yn": 0.8029812054439404,
      "exact_match_stderr,binary_yn": 0.007066156790759165,
      "recall_gu_yn,binary_yn": 0.742353491290786,
      "recall_gu_yn_stderr,binary_yn": "N/A",
      "f1_gu_yn,binary_yn": 0.6289530412527182,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "alias": "group_ehrshot_measurement_lab_tasks_gu"
    },
    "ehrshot_measurement_lab_albumin_gu": {
      "alias": " - ehrshot_measurement_lab_albumin_gu",
      "exact_match,binary_yn": 0.7932203389830509,
      "exact_match_stderr,binary_yn": 0.023619851618900144,
      "f1_gu_yn,binary_yn": 0.6772486772486772,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.7272727272727273,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_alt_gu": {
      "alias": " - ehrshot_measurement_lab_alt_gu",
      "exact_match,binary_yn": 0.8533333333333334,
      "exact_match_stderr,binary_yn": 0.02045923882658053,
      "f1_gu_yn,binary_yn": 0.6,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.5789473684210527,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_ast_gu": {
      "alias": " - ehrshot_measurement_lab_ast_gu",
      "exact_match,binary_yn": 0.8127090301003345,
      "exact_match_stderr,binary_yn": 0.022600488687306266,
      "f1_gu_yn,binary_yn": 0.5692307692307692,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.6491228070175439,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_bilirubin_gu": {
      "alias": " - ehrshot_measurement_lab_bilirubin_gu",
      "exact_match,binary_yn": 0.9078498293515358,
      "exact_match_stderr,binary_yn": 0.01692636315081987,
      "f1_gu_yn,binary_yn": 0.47058823529411764,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.8,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_bun_gu": {
      "alias": " - ehrshot_measurement_lab_bun_gu",
      "exact_match,binary_yn": 0.8630952380952381,
      "exact_match_stderr,binary_yn": 0.018780892804788615,
      "f1_gu_yn,binary_yn": 0.7228915662650602,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.8108108108108109,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_creatinine_gu": {
      "alias": " - ehrshot_measurement_lab_creatinine_gu",
      "exact_match,binary_yn": 0.8666666666666667,
      "exact_match_stderr,binary_yn": 0.018328047158971912,
      "f1_gu_yn,binary_yn": 0.7745098039215687,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.8681318681318682,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_crp_gu": {
      "alias": " - ehrshot_measurement_lab_crp_gu",
      "exact_match,binary_yn": 0.7272727272727273,
      "exact_match_stderr,binary_yn": 0.09718590614997252,
      "f1_gu_yn,binary_yn": 0.7,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.875,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_glucose_gu": {
      "alias": " - ehrshot_measurement_lab_glucose_gu",
      "exact_match,binary_yn": 0.6845238095238095,
      "exact_match_stderr,binary_yn": 0.025389559713477543,
      "f1_gu_yn,binary_yn": 0.5092592592592593,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.6626506024096386,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_hba1c_gu": {
      "alias": " - ehrshot_measurement_lab_hba1c_gu",
      "exact_match,binary_yn": 0.813953488372093,
      "exact_match_stderr,binary_yn": 0.0422086145568851,
      "f1_gu_yn,binary_yn": 0.7894736842105263,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.8823529411764706,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_hemoglobin_gu": {
      "alias": " - ehrshot_measurement_lab_hemoglobin_gu",
      "exact_match,binary_yn": 0.7319277108433735,
      "exact_match_stderr,binary_yn": 0.024347033848694306,
      "f1_gu_yn,binary_yn": 0.72782874617737,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.8095238095238095,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_ldl_gu": {
      "alias": " - ehrshot_measurement_lab_ldl_gu",
      "exact_match,binary_yn": 0.8214285714285714,
      "exact_match_stderr,binary_yn": 0.07370704611510599,
      "f1_gu_yn,binary_yn": 0.6153846153846154,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.6666666666666666,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_platelets_gu": {
      "alias": " - ehrshot_measurement_lab_platelets_gu",
      "exact_match,binary_yn": 0.7370030581039755,
      "exact_match_stderr,binary_yn": 0.024383789146840154,
      "f1_gu_yn,binary_yn": 0.5520833333333334,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.7162162162162162,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    },
    "ehrshot_measurement_lab_totalcholesterol_gu": {
      "alias": " - ehrshot_measurement_lab_totalcholesterol_gu",
      "exact_match,binary_yn": 0.7701149425287356,
      "exact_match_stderr,binary_yn": 0.04537158185250774,
      "f1_gu_yn,binary_yn": 0.5652173913043478,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "recall_gu_yn,binary_yn": 0.7222222222222222,
      "recall_gu_yn_stderr,binary_yn": "N/A"
    }
  },
  "groups": {
    "group_ehrshot_measurement_lab_tasks_gu": {
      "exact_match,binary_yn": 0.8029812054439404,
      "exact_match_stderr,binary_yn": 0.007066156790759165,
      "recall_gu_yn,binary_yn": 0.742353491290786,
      "recall_gu_yn_stderr,binary_yn": "N/A",
      "f1_gu_yn,binary_yn": 0.6289530412527182,
      "f1_gu_yn_stderr,binary_yn": "N/A",
      "alias": "group_ehrshot_measurement_lab_tasks_gu"
    }
  },
  "group_subtasks": {
    "group_ehrshot_measurement_lab_tasks_gu": [
      "ehrshot_measurement_lab_albumin_gu",
      "ehrshot_measurement_lab_alt_gu",
      "ehrshot_measurement_lab_ast_gu",
      "ehrshot_measurement_lab_bilirubin_gu",
      "ehrshot_measurement_lab_bun_gu",
      "ehrshot_measurement_lab_creatinine_gu",
      "ehrshot_measurement_lab_crp_gu",
      "ehrshot_measurement_lab_glucose_gu",
      "ehrshot_measurement_lab_hba1c_gu",
      "ehrshot_measurement_lab_hemoglobin_gu",
      "ehrshot_measurement_lab_ldl_gu",
      "ehrshot_measurement_lab_platelets_gu",
      "ehrshot_measurement_lab_totalcholesterol_gu"
    ]
  },
  "configs": {
    "ehrshot_measurement_lab_albumin_gu": {
      "task": "ehrshot_measurement_lab_albumin_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/albumin_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for albumin: predict next measurement normal/abnormal status (≥3.5 g/dL = normal, <3.5 g/dL = abnormal)",
        "pretrained": "baichuan-inc/Baichuan-M2-32B",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "16384",
        "gpu_memory_utilization": 0.9,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "baichuan-inc/Baichuan-M2-32B",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_alt_gu": {
      "task": "ehrshot_measurement_lab_alt_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/alt_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for ALT: predict next measurement normal/abnormal status (≤50 [U]/L = normal, >50 [U]/L = abnormal)",
        "pretrained": "baichuan-inc/Baichuan-M2-32B",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "16384",
        "gpu_memory_utilization": 0.9,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "baichuan-inc/Baichuan-M2-32B",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_ast_gu": {
      "task": "ehrshot_measurement_lab_ast_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/ast_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for AST: predict next measurement normal/abnormal status (≤40 [U]/L = normal, >40 [U]/L = abnormal)",
        "pretrained": "baichuan-inc/Baichuan-M2-32B",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "16384",
        "gpu_memory_utilization": 0.9,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "baichuan-inc/Baichuan-M2-32B",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_bilirubin_gu": {
      "task": "ehrshot_measurement_lab_bilirubin_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/bilirubin_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for bilirubin: predict next measurement normal/abnormal status (≤1.2 mg/dL = normal, >1.2 mg/dL = abnormal)",
        "pretrained": "baichuan-inc/Baichuan-M2-32B",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "16384",
        "gpu_memory_utilization": 0.9,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "baichuan-inc/Baichuan-M2-32B",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_bun_gu": {
      "task": "ehrshot_measurement_lab_bun_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/bun_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for BUN: predict next measurement normal/abnormal status (6-24 mg/dL = normal, <6 or >24 mg/dL = abnormal)",
        "pretrained": "baichuan-inc/Baichuan-M2-32B",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "16384",
        "gpu_memory_utilization": 0.9,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "baichuan-inc/Baichuan-M2-32B",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_creatinine_gu": {
      "task": "ehrshot_measurement_lab_creatinine_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/creatinine_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for creatinine: predict next measurement normal/abnormal status (≤1.2 mg/dL = normal, >1.2 mg/dL = abnormal)",
        "pretrained": "baichuan-inc/Baichuan-M2-32B",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "16384",
        "gpu_memory_utilization": 0.9,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "baichuan-inc/Baichuan-M2-32B",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_crp_gu": {
      "task": "ehrshot_measurement_lab_crp_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/crp_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for CRP: predict next measurement normal/abnormal status (≤1 mg/dL = normal, >1 mg/dL = abnormal)",
        "pretrained": "baichuan-inc/Baichuan-M2-32B",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "16384",
        "gpu_memory_utilization": 0.9,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "baichuan-inc/Baichuan-M2-32B",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_glucose_gu": {
      "task": "ehrshot_measurement_lab_glucose_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/glucose_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for glucose: predict next measurement normal/abnormal status (≤126 mg/dL = normal, >126 mg/dL = abnormal)",
        "pretrained": "baichuan-inc/Baichuan-M2-32B",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "16384",
        "gpu_memory_utilization": 0.9,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "baichuan-inc/Baichuan-M2-32B",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_hba1c_gu": {
      "task": "ehrshot_measurement_lab_hba1c_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/hba1c_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for HbA1c: predict next measurement normal/abnormal status (≤6.5% = normal, >6.5% = abnormal)",
        "pretrained": "baichuan-inc/Baichuan-M2-32B",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "16384",
        "gpu_memory_utilization": 0.9,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "baichuan-inc/Baichuan-M2-32B",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_hemoglobin_gu": {
      "task": "ehrshot_measurement_lab_hemoglobin_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/hemoglobin_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for hemoglobin: predict next measurement normal/abnormal status (≥12 g/dL = normal, <12 g/dL = abnormal)",
        "pretrained": "baichuan-inc/Baichuan-M2-32B",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "16384",
        "gpu_memory_utilization": 0.9,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "baichuan-inc/Baichuan-M2-32B",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_ldl_gu": {
      "task": "ehrshot_measurement_lab_ldl_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/ldl_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for LDL cholesterol: predict next measurement normal/abnormal status (≤130 mg/dL = normal, >130 mg/dL = abnormal)",
        "pretrained": "baichuan-inc/Baichuan-M2-32B",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "16384",
        "gpu_memory_utilization": 0.9,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "baichuan-inc/Baichuan-M2-32B",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_platelets_gu": {
      "task": "ehrshot_measurement_lab_platelets_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/platelets_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for platelets: predict next measurement normal/abnormal status (150-450 10*3/uL = normal, <150 or >450 10*3/uL = abnormal)",
        "pretrained": "baichuan-inc/Baichuan-M2-32B",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "16384",
        "gpu_memory_utilization": 0.9,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "baichuan-inc/Baichuan-M2-32B",
        "task_name": "measurement_lab"
      }
    },
    "ehrshot_measurement_lab_totalcholesterol_gu": {
      "task": "ehrshot_measurement_lab_totalcholesterol_gu",
      "dataset_path": "parquet",
      "dataset_kwargs": {
        "data_files": {
          "test": "/home/yl2342/project_pi_hx235/yl2342/data/ehrshot/visit_oriented_ehr/task_measurement/totalcholesterol_test/*.parquet"
        }
      },
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Generate the input prompt for measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with keys:\n            - visit_cumulated: Full visit history text\n            - measurement_concept_name: Name of the measurement\n            - current_value: Current measurement value\n            - threshold: Threshold value for normal/abnormal classification\n            - unit: Unit of measurement\n            - normal_direction: Direction for normal classification (\"below\", \"above\", or \"in range\")\n    \n    Returns:\n        str: Formatted prompt text for the model\n    \"\"\"\n    # Extract relevant information from the document\n    visit_history = doc[\"visit_cumulated\"]\n    measurement_name = doc[\"measurement_concept_name\"]\n    current_value = doc[\"current_value\"]\n    threshold = doc[\"threshold\"]\n    unit = doc[\"unit\"]\n    normal_direction = doc[\"normal_direction\"]\n    \n    # Handle different threshold types and create appropriate descriptions\n    if normal_direction == \"below\":\n        # For measurements where lower values are normal (e.g., cholesterol, LDL)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or below, while abnormal values are above {threshold} {unit}.\"\n    elif normal_direction == \"above\":\n        # For measurements where higher values are normal (e.g., hemoglobin)\n        threshold_explanation = f\"For {measurement_name}, normal values are {threshold} {unit} or above, while abnormal values are below {threshold} {unit}.\"\n    elif normal_direction == \"in range\":\n        # For measurements where values within a range are normal (e.g., BUN, platelets)\n        # threshold should be a string like \"[6, 24]\" - we need to parse it\n        threshold_str = threshold.strip(\"[]\")\n        min_val, max_val = threshold_str.split(\", \")\n        threshold_explanation = f\"For {measurement_name}, normal values are between {min_val} and {max_val} {unit} (inclusive), while abnormal values are below {min_val} or above {max_val} {unit}.\"\n    \n    # Create the prompt with task description before visit history\n    prompt = f\"\"\"This is a task about predicting if the patient's next {measurement_name} measurement will be normal or abnormal based on their recent EHR visit data: \n\n{visit_history}\n\nAbove are the patient's recent EHR visit records (including the current visit) in chronological order.\n\n\nYou are a medical AI assistant predicting patient {measurement_name} trends given the patient's recent and current EHR visit records provided above. The {measurement_name} value in the current visit is {current_value} {unit}.\n\nINSTRUCTIONS:\n- Predict if the next available {measurement_name} measurement in the following visits will be abnormal\n- {threshold_explanation}\n- Do not provide any explanation, reasoning, or additional text\n- You must respond with exactly one word only: Yes or No\n\nAnswer:\"\"\"\n    \n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> str:\n    \"\"\"\n    Extract the target label for the measurement prediction task.\n    \n    Args:\n        doc: A dictionary containing the patient data with key:\n            - next_label: The actual next measurement label (0 for \"normal\", 1 for \"abnormal\")\n    \n    Returns:\n        str: \"No\" for 0, \"Yes\" for 1\n    \"\"\"\n    # Convert integer (0 or 1) to string (\"No\"/\"Yes\") for generate_until tasks\n    return \"Yes\" if int(doc[\"next_label\"]) == 1 else \"No\" \n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1_gu_yn",
          "aggregation": "f1",
          "higher_is_better": true
        },
        {
          "metric": "recall_gu_yn",
          "aggregation": "recall",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "<im_end>"
        ],
        "max_gen_toks": 2048,
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "binary_yn",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "(?s)\\b(yes|no)\\b",
              "group_select": 0,
              "fallback": "no"
            },
            {
              "function": "map",
              "mapping_dict": {
                "yes": "Yes",
                "no": "No"
              },
              "default_value": "No"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "description": "EHR measurement prediction task for total cholesterol: predict next measurement normal/abnormal status (≤200 mg/dL = normal, >200 mg/dL = abnormal)",
        "pretrained": "baichuan-inc/Baichuan-M2-32B",
        "tensor_parallel_size": 1,
        "data_parallel_size": 1,
        "dtype": "bfloat16",
        "max_model_len": "16384",
        "gpu_memory_utilization": 0.9,
        "enable_thinking": true,
        "think_end_token": "</think>",
        "model_name": "baichuan-inc/Baichuan-M2-32B",
        "task_name": "measurement_lab"
      }
    }
  },
  "versions": {
    "ehrshot_measurement_lab_albumin_gu": "Yaml",
    "ehrshot_measurement_lab_alt_gu": "Yaml",
    "ehrshot_measurement_lab_ast_gu": "Yaml",
    "ehrshot_measurement_lab_bilirubin_gu": "Yaml",
    "ehrshot_measurement_lab_bun_gu": "Yaml",
    "ehrshot_measurement_lab_creatinine_gu": "Yaml",
    "ehrshot_measurement_lab_crp_gu": "Yaml",
    "ehrshot_measurement_lab_glucose_gu": "Yaml",
    "ehrshot_measurement_lab_hba1c_gu": "Yaml",
    "ehrshot_measurement_lab_hemoglobin_gu": "Yaml",
    "ehrshot_measurement_lab_ldl_gu": "Yaml",
    "ehrshot_measurement_lab_platelets_gu": "Yaml",
    "ehrshot_measurement_lab_totalcholesterol_gu": "Yaml",
    "group_ehrshot_measurement_lab_tasks_gu": 1.0
  },
  "n-shot": {
    "ehrshot_measurement_lab_albumin_gu": 0,
    "ehrshot_measurement_lab_alt_gu": 0,
    "ehrshot_measurement_lab_ast_gu": 0,
    "ehrshot_measurement_lab_bilirubin_gu": 0,
    "ehrshot_measurement_lab_bun_gu": 0,
    "ehrshot_measurement_lab_creatinine_gu": 0,
    "ehrshot_measurement_lab_crp_gu": 0,
    "ehrshot_measurement_lab_glucose_gu": 0,
    "ehrshot_measurement_lab_hba1c_gu": 0,
    "ehrshot_measurement_lab_hemoglobin_gu": 0,
    "ehrshot_measurement_lab_ldl_gu": 0,
    "ehrshot_measurement_lab_platelets_gu": 0,
    "ehrshot_measurement_lab_totalcholesterol_gu": 0
  },
  "higher_is_better": {
    "ehrshot_measurement_lab_albumin_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_alt_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_ast_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_bilirubin_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_bun_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_creatinine_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_crp_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_glucose_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_hba1c_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_hemoglobin_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_ldl_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_platelets_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "ehrshot_measurement_lab_totalcholesterol_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    },
    "group_ehrshot_measurement_lab_tasks_gu": {
      "exact_match": true,
      "f1_gu_yn": true,
      "recall_gu_yn": true
    }
  },
  "n-samples": {
    "ehrshot_measurement_lab_albumin_gu": {
      "original": 295,
      "effective": 295
    },
    "ehrshot_measurement_lab_alt_gu": {
      "original": 300,
      "effective": 300
    },
    "ehrshot_measurement_lab_ast_gu": {
      "original": 299,
      "effective": 299
    },
    "ehrshot_measurement_lab_bilirubin_gu": {
      "original": 293,
      "effective": 293
    },
    "ehrshot_measurement_lab_bun_gu": {
      "original": 336,
      "effective": 336
    },
    "ehrshot_measurement_lab_creatinine_gu": {
      "original": 345,
      "effective": 345
    },
    "ehrshot_measurement_lab_crp_gu": {
      "original": 22,
      "effective": 22
    },
    "ehrshot_measurement_lab_glucose_gu": {
      "original": 336,
      "effective": 336
    },
    "ehrshot_measurement_lab_hba1c_gu": {
      "original": 86,
      "effective": 86
    },
    "ehrshot_measurement_lab_hemoglobin_gu": {
      "original": 332,
      "effective": 332
    },
    "ehrshot_measurement_lab_ldl_gu": {
      "original": 28,
      "effective": 28
    },
    "ehrshot_measurement_lab_platelets_gu": {
      "original": 327,
      "effective": 327
    },
    "ehrshot_measurement_lab_totalcholesterol_gu": {
      "original": 87,
      "effective": 87
    }
  },
  "config": {
    "model": "vllm",
    "model_args": "pretrained=baichuan-inc/Baichuan-M2-32B,tensor_parallel_size=1,data_parallel_size=1,dtype=bfloat16,max_model_len=16384,gpu_memory_utilization=0.9,enable_thinking=True,think_end_token=</think>",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "12282f85",
  "date": 1758280030.441892,
  "pretty_env_info": "PyTorch version: 2.6.0+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: Red Hat Enterprise Linux release 8.10 (Ootpa) (x86_64)\nGCC version: (GCC) 8.5.0 20210514 (Red Hat 8.5.0-26)\nClang version: Could not collect\nCMake version: Could not collect\nLibc version: glibc-2.28\n\nPython version: 3.12.11 | packaged by conda-forge | (main, Jun  4 2025, 14:45:31) [GCC 13.3.0] (64-bit runtime)\nPython platform: Linux-4.18.0-553.52.1.el8_10.x86_64-x86_64-with-glibc2.28\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: GPU 0: NVIDIA H200\nNvidia driver version: 570.133.20\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:        x86_64\nCPU op-mode(s):      32-bit, 64-bit\nByte Order:          Little Endian\nCPU(s):              48\nOn-line CPU(s) list: 0-47\nThread(s) per core:  1\nCore(s) per socket:  24\nSocket(s):           2\nNUMA node(s):        2\nVendor ID:           GenuineIntel\nCPU family:          6\nModel:               207\nModel name:          INTEL(R) XEON(R) GOLD 6542Y\nStepping:            2\nCPU MHz:             4100.000\nCPU max MHz:         4100.0000\nCPU min MHz:         800.0000\nBogoMIPS:            5800.00\nL1d cache:           48K\nL1i cache:           32K\nL2 cache:            2048K\nL3 cache:            61440K\nNUMA node0 CPU(s):   0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46\nNUMA node1 CPU(s):   1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 monitor ds_cpl smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cat_l2 cdp_l3 invpcid_single cdp_l2 ssbd mba ibrs ibpb stibp ibrs_enhanced fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb intel_pt avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local split_lock_detect avx_vnni avx512_bf16 wbnoinvd dtherm ida arat pln pts hfi avx512vbmi umip pku ospke waitpkg avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg tme avx512_vpopcntdq la57 rdpid bus_lock_detect cldemote movdiri movdir64b enqcmd fsrm md_clear serialize tsxldtrk pconfig arch_lbr amx_bf16 avx512_fp16 amx_tile amx_int8 flush_l1d arch_capabilities\n\nVersions of relevant libraries:\n[pip3] numpy==2.2.6\n[pip3] nvidia-cublas-cu12==12.4.5.8\n[pip3] nvidia-cuda-cupti-cu12==12.4.127\n[pip3] nvidia-cuda-nvrtc-cu12==12.4.127\n[pip3] nvidia-cuda-runtime-cu12==12.4.127\n[pip3] nvidia-cudnn-cu12==9.1.0.70\n[pip3] nvidia-cudnn-frontend==1.14.1\n[pip3] nvidia-cufft-cu12==11.2.1.3\n[pip3] nvidia-curand-cu12==10.3.5.147\n[pip3] nvidia-cusolver-cu12==11.6.1.9\n[pip3] nvidia-cusparse-cu12==12.3.1.170\n[pip3] nvidia-cusparselt-cu12==0.6.2\n[pip3] nvidia-nccl-cu12==2.21.5\n[pip3] nvidia-nvjitlink-cu12==12.4.127\n[pip3] nvidia-nvtx-cu12==12.4.127\n[pip3] torch==2.6.0\n[pip3] torchaudio==2.6.0\n[pip3] torchvision==0.21.0\n[pip3] triton==3.2.0\n[conda] numpy                     2.2.6                    pypi_0    pypi\n[conda] nvidia-cublas-cu12        12.4.5.8                 pypi_0    pypi\n[conda] nvidia-cuda-cupti-cu12    12.4.127                 pypi_0    pypi\n[conda] nvidia-cuda-nvrtc-cu12    12.4.127                 pypi_0    pypi\n[conda] nvidia-cuda-runtime-cu12  12.4.127                 pypi_0    pypi\n[conda] nvidia-cudnn-cu12         9.1.0.70                 pypi_0    pypi\n[conda] nvidia-cudnn-frontend     1.14.1                   pypi_0    pypi\n[conda] nvidia-cufft-cu12         11.2.1.3                 pypi_0    pypi\n[conda] nvidia-curand-cu12        10.3.5.147               pypi_0    pypi\n[conda] nvidia-cusolver-cu12      11.6.1.9                 pypi_0    pypi\n[conda] nvidia-cusparse-cu12      12.3.1.170               pypi_0    pypi\n[conda] nvidia-cusparselt-cu12    0.6.2                    pypi_0    pypi\n[conda] nvidia-nccl-cu12          2.21.5                   pypi_0    pypi\n[conda] nvidia-nvjitlink-cu12     12.4.127                 pypi_0    pypi\n[conda] nvidia-nvtx-cu12          12.4.127                 pypi_0    pypi\n[conda] torch                     2.6.0                    pypi_0    pypi\n[conda] torchaudio                2.6.0                    pypi_0    pypi\n[conda] torchvision               0.21.0                   pypi_0    pypi\n[conda] triton                    3.2.0                    pypi_0    pypi",
  "transformers_version": "4.56.1",
  "lm_eval_version": "0.4.9.1",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|endoftext|>",
    "151643"
  ],
  "tokenizer_eos_token": [
    "<|im_end|>",
    "151645"
  ],
  "tokenizer_bos_token": [
    null,
    "None"
  ],
  "eot_token_id": 151645,
  "max_length": 16384,
  "task_hashes": {},
  "model_source": "vllm",
  "model_name": "baichuan-inc/Baichuan-M2-32B",
  "model_name_sanitized": "baichuan-inc__Baichuan-M2-32B",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": "{%- if tools %}\n    {{- '<|im_start|>system\\n' }}\n    {%- if messages[0].role == 'system' %}\n        {{- messages[0].content + '\\n\\n' }}\n    {%- endif %}\n    {{- \"# Tools\\n\\nYou may call one or more functions to assist with the user query.\\n\\nYou are provided with function signatures within <tools></tools> XML tags:\\n<tools>\" }}\n    {%- for tool in tools %}\n        {{- \"\\n\" }}\n        {{- tool | tojson }}\n    {%- endfor %}\n    {{- \"\\n</tools>\\n\\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\\n<tool_call>\\n{\\\"name\\\": <function-name>, \\\"arguments\\\": <args-json-object>}\\n</tool_call><|im_end|>\\n\" }}\n{%- else %}\n    {%- if messages[0].role == 'system' %}\n        {{- '<|im_start|>system\\n' + messages[0].content + '<|im_end|>\\n' }}\n    {%- endif %}\n{%- endif %}\n{%- set ns = namespace(multi_step_tool=true, last_query_index=messages|length - 1) %}\n{%- for message in messages[::-1] %}\n    {%- set index = (messages|length - 1) - loop.index0 %}\n    {%- if ns.multi_step_tool and message.role == \"user\" and not(message.content.startswith('<tool_response>') and message.content.endswith('</tool_response>')) %}\n        {%- set ns.multi_step_tool = false %}\n        {%- set ns.last_query_index = index %}\n    {%- endif %}\n{%- endfor %}\n{%- for message in messages %}\n    {%- if (message.role == \"user\") or (message.role == \"system\" and not loop.first) %}\n        {{- '<|im_start|>' + message.role + '\\n' + message.content + '<|im_end|>' + '\\n' }}\n    {%- elif message.role == \"assistant\" %}\n        {%- set content = message.content %}\n        {%- set reasoning_content = '' %}\n        {%- if message.reasoning_content is defined and message.reasoning_content is not none %}\n            {%- set reasoning_content = message.reasoning_content %}\n        {%- else %}\n            {%- if '</think>' in message.content %}\n                {%- set content = message.content.split('</think>')[-1].lstrip('\\n') %}\n                {%- set reasoning_content = message.content.split('</think>')[0].rstrip('\\n').split('<think>')[-1].lstrip('\\n') %}\n            {%- endif %}\n        {%- endif %}\n        {%- if loop.index0 > ns.last_query_index %}\n            {%- if loop.last or (not loop.last and reasoning_content) %}\n                {{- '<|im_start|>' + message.role + '\\n<think>\\n' + reasoning_content.strip('\\n') + '\\n</think>\\n\\n' + content.lstrip('\\n') }}\n            {%- else %}\n                {{- '<|im_start|>' + message.role + '\\n' + content }}\n            {%- endif %}\n        {%- else %}\n            {{- '<|im_start|>' + message.role + '\\n' + content }}\n        {%- endif %}\n        {%- if message.tool_calls %}\n            {%- for tool_call in message.tool_calls %}\n                {%- if (loop.first and content) or (not loop.first) %}\n                    {{- '\\n' }}\n                {%- endif %}\n                {%- if tool_call.function %}\n                    {%- set tool_call = tool_call.function %}\n                {%- endif %}\n                {{- '<tool_call>\\n{\"name\": \"' }}\n                {{- tool_call.name }}\n                {{- '\", \"arguments\": ' }}\n                {%- if tool_call.arguments is string %}\n                    {{- tool_call.arguments }}\n                {%- else %}\n                    {{- tool_call.arguments | tojson }}\n                {%- endif %}\n                {{- '}\\n</tool_call>' }}\n            {%- endfor %}\n        {%- endif %}\n        {{- '<|im_end|>\\n' }}\n    {%- elif message.role == \"tool\" %}\n        {%- if loop.first or (messages[loop.index0 - 1].role != \"tool\") %}\n            {{- '<|im_start|>user' }}\n        {%- endif %}\n        {{- '\\n<tool_response>\\n' }}\n        {{- message.content }}\n        {{- '\\n</tool_response>' }}\n        {%- if loop.last or (messages[loop.index0 + 1].role != \"tool\") %}\n            {{- '<|im_end|>\\n' }}\n        {%- endif %}\n    {%- endif %}\n{%- endfor %}\n{%- if add_generation_prompt %}\n    {{- '<|im_start|>assistant\\n' }}\n    {%- if thinking_mode is defined %}\n        {%- if thinking_mode == \"on\" %}\n            {{- '<think>\\n' }}\n        {%- elif thinking_mode == \"off\" %}\n            {{- '<think>\\n\\n' }}\n        {%- endif %}\n    {%- endif %}\n{%- endif %}\n",
  "chat_template_sha": "3652506ec6db137403462af9f1418dbfd9e17818abc39e129ea6ec96254a91e7",
  "start_time": 6757085.759299009,
  "end_time": 6770361.01952562,
  "total_evaluation_time_seconds": "13275.260226611048"
}